<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shoezy- My Addresses</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <link rel="stylesheet" href="/css/addressPage.css">
    <link rel="stylesheet" href="/css/breadcrumbs.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        /* Ensure SweetAlert appears above modal */
        .swal2-container {
            z-index: 99999 !important;
        }

        /* Style for address type buttons in both add and edit modals */
        .address-btn,
        .edit-address-btn {
            padding: 10px 20px;
            margin: 5px;
            border: 2px solid #ddd;
            background-color: #f8f9fa;
            color: #6c757d;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
            outline: none;
            font-size: 14px;
        }

        .address-btn:hover,
        .edit-address-btn:hover {
            border-color: #007bff;
            color: #007bff;
            background-color: #e3f2fd;
            transform: translateY(-1px);
        }

        .address-btn.active,
        .edit-address-btn.active {
            background-color: #007bff;
            color: white;
            border-color: #007bff;
            box-shadow: 0 2px 4px rgba(0, 123, 255, 0.3);
        }

        .address-options {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            margin-top: 10px;
        }

        /* Ensure buttons are properly styled */
        .address-btn:focus,
        .edit-address-btn:focus {
            outline: none;
            box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.25);
        }

        /* Default address styling */
        .address-card.default-address {
            border: 2px solid #28a745;
            box-shadow: 0 4px 8px rgba(40, 167, 69, 0.2);
        }

        .address-card.default-address .address-type-badge {
            background-color: #28a745;
            color: white;
        }

        .btn-success {
            background-color: #28a745;
            border-color: #28a745;
            color: white;
        }

        .btn-success:disabled {
            background-color: #28a745;
            border-color: #28a745;
            opacity: 0.8;
            cursor: not-allowed;
        }
    </style>
</head>

<body>
    <%- include("../partials/user/navbar") %>

        <!-- Main Layout Container -->
        <div class="page-container">
            <!-- Main Layout with Sidebar -->
            <div class="page-layout">
                <!-- Sidebar -->
                <aside class="sidebar">
                    <%- include("../partials/user/profileSidebar") %>
                </aside>

                <!-- Main Content -->
                <main class="main-content">
                    <div class="container">
                        <div class="page-header">
                            <div class="header-icon">
                                <span class="material-icons">location_on</span>
                            </div>
                            <div class="header-text">
                                <h1>My Addresses</h1>
                                <p>Manage your delivery locations</p>
                            </div>
                        </div>

                        <div class="addresses-section">
                            <div class="section-header">
                                <div class="section-title">
                                    <h2>Saved Addresses</h2>
                                    <p>Choose from your saved delivery locations</p>
                                </div>
                                <button class="btn btn-primary" id="openModal">Add New Address</button>
                            </div>
                            <% if (addresses && addresses.length> 0) { %>
                                <div class="addresses-grid">
                                    <% addresses.forEach(function(address) { %>
                                        <div class="address-card <%= address.isDefault ? 'default-address' : '' %>">
                                            <div class="address-header">
                                                <div
                                                    class="address-type-badge <%= address.addressType.toLowerCase() %>">
                                                    <span class="material-icons">
                                                        <% if (address.addressType.toLowerCase()==='home' ) { %>home<% }
                                                                else if (address.addressType.toLowerCase()==='office' )
                                                                { %>work<% } else { %>location_on<% } %>
                                                    </span>
                                                    <span>
                                                        <%= address.addressType %>
                                                    </span>
                                                    <% if (address.isDefault) { %>
                                                        <span class="material-icons"
                                                            style="margin-left: 5px; font-size: 16px;">check_circle</span>
                                                        <% } %>
                                                </div>
                                                <div class="address-actions">
                                                    <button class="action-btn edit-btn" title="Edit Address"
                                                        data-address-id="<%= address._id %>"
                                                        data-full-name="<%= address.fullName %>"
                                                        data-mobile-number="<%= address.mobileNumber %>"
                                                        data-address="<%= address.address %>"
                                                        data-city="<%= address.city %>"
                                                        data-district="<%= address.district %>"
                                                        data-state="<%= address.state %>"
                                                        data-pin-code="<%= address.pinCode %>"
                                                        data-landmark="<%= address.landmark || '' %>"
                                                        data-address-type="<%= address.addressType.toLowerCase() %>">
                                                        <span class="material-icons">edit</span>
                                                    </button>
                                                    <button class="action-btn delete-btn" title="Delete Address"
                                                        data-address-id="<%= address._id %>"
                                                        data-is-default="<%= address.isDefault %>">
                                                        <span class="material-icons">delete</span>
                                                    </button>
                                                </div>
                                            </div>
                                            <div class="address-content">
                                                <div class="address-name">
                                                    <span class="material-icons">person</span>
                                                    <strong>
                                                        <%= address.fullName %>
                                                    </strong>
                                                </div>
                                                <div class="address-phone">
                                                    <span class="material-icons">phone</span>
                                                    <span>
                                                        <%= address.mobileNumber %>
                                                    </span>
                                                </div>
                                                <div class="address-location">
                                                    <span class="material-icons">location_on</span>
                                                    <div class="address-details">
                                                        <p>
                                                            <%= address.address %>
                                                        </p>
                                                        <p>
                                                            <%= address.city %>, <%= address.district %>
                                                        </p>
                                                        <p>
                                                            <%= address.state %> - <%= address.pinCode %>
                                                        </p>
                                                        <% if (address.landmark) { %>
                                                            <p class="landmark">Near <%= address.landmark %>
                                                            </p>
                                                            <% } %>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="address-footer">
                                                <button
                                                    class="btn <%= address.isDefault ? 'btn-success' : 'btn-primary' %> select-address"
                                                    data-address-id="<%= address._id %>" <%=address.isDefault
                                                    ? 'disabled' : '' %>>
                                                    <%= address.isDefault ? 'Default Address' : 'Select This Address' %>
                                                </button>
                                            </div>
                                        </div>
                                        <% }); %>
                                </div>
                                <% } else { %>
                                    <div class="empty-state">
                                        <div class="empty-icon">
                                            <span class="material-icons">location_off</span>
                                        </div>
                                        <h3>No addresses found</h3>
                                        <p>You haven't added any delivery locations to your account yet.</p>
                                        <button class="btn btn-large btn-primary" id="openModal">Add Your First
                                            Address</button>
                                    </div>
                                    <% } %>
                        </div>
                    </div>
                </main>
            </div>
        </div>

        <!-- Add Address Modal -->
        <div class="modal" id="addressModal">
            <div class="modal-content">
                <span class="modal-close" id="closeModal">&times;</span>
                <div class="modal-header">
                    <span class="material-icons">location_on</span>
                    <h2>Add New Address</h2>
                </div>
                <form class="address-form" action="/profile/add" method="POST">
                    <div class="form-group">
                        <label for="fullName">Full Name</label>
                        <input type="text" id="fullName" name="fullName" placeholder="Enter your full name"
                            value="<%= formData.fullName || '' %>" class="<%= errors.fullName ? 'error' : '' %>">
                        <% if (errors.fullName) { %>
                            <span class="error-message">
                                <%= errors.fullName %>
                            </span>
                            <% } %>
                    </div>

                    <div class="form-group">
                        <label for="mobileNumber">Mobile Number</label>
                        <div class="phone-input-container">
                            <select id="countryCode" name="countryCode"
                                class="country-code-select <%= errors.mobileNumber ? 'error' : '' %>">
                                <option value="+91" data-flag="🇮🇳">🇮🇳 +91</option>
                                <option value="+1" data-flag="🇺🇸">🇺🇸 +1</option>
                                <option value="+44" data-flag="🇬🇧">🇬🇧 +44</option>
                                <option value="+61" data-flag="🇦🇺">🇦🇺 +61</option>
                                <option value="+81" data-flag="🇯🇵">🇯🇵 +81</option>
                                <option value="+86" data-flag="🇨🇳">🇨🇳 +86</option>
                                <option value="+33" data-flag="🇫🇷">🇫🇷 +33</option>
                                <option value="+49" data-flag="🇩🇪">🇩🇪 +49</option>
                                <option value="+7" data-flag="🇷🇺">🇷🇺 +7</option>
                                <option value="+55" data-flag="🇧🇷">🇧🇷 +55</option>
                                <option value="+82" data-flag="🇰🇷">🇰🇷 +82</option>
                                <option value="+34" data-flag="🇪🇸">🇪🇸 +34</option>
                                <option value="+39" data-flag="🇮🇹">🇮🇹 +39</option>
                                <option value="+31" data-flag="🇳🇱">🇳🇱 +31</option>
                                <option value="+41" data-flag="🇨🇭">🇨🇭 +41</option>
                            </select>
                            <input type="tel" id="mobileNumber" name="mobileNumber" placeholder="Enter mobile number"
                                value="<%= formData.mobileNumber || '' %>"
                                class="phone-number-input <%= errors.mobileNumber ? 'error' : '' %>">
                        </div>
                        <% if (errors.mobileNumber) { %>
                            <span class="error-message">
                                <%= errors.mobileNumber %>
                            </span>
                            <% } %>
                    </div>

                    <div class="form-group">
                        <label for="address">Address</label>
                        <textarea id="address" name="address" placeholder="Enter your complete address" rows="3"
                            class="<%= errors.address ? 'error' : '' %>"><%= formData.address || '' %></textarea>
                        <% if (errors.address) { %>
                            <span class="error-message">
                                <%= errors.address %>
                            </span>
                            <% } %>
                    </div>

                    <div class="form-group">
                        <label for="city">City</label>
                        <input type="text" id="city" name="city" placeholder="Enter city"
                            value="<%= formData.city || '' %>" class="<%= errors.city ? 'error' : '' %>">
                        <% if (errors.city) { %>
                            <span class="error-message">
                                <%= errors.city %>
                            </span>
                            <% } %>
                    </div>

                    <div class="form-group">
                        <label for="state">State</label>
                        <select id="state" name="state" class="<%= errors.state ? 'error' : '' %>">

                            <option value="Goa">Goa</option>

                            <option value="Karnataka">Karnataka</option>
                            <option value="Kerala">Kerala</option>


                            <option value="Tamil Nadu">Tamil Nadu</option>

                            <option value="Delhi">Delhi</option>

                        </select>
                        <% if (errors.state) { %>
                            <span class="error-message">
                                <%= errors.state %>
                            </span>
                            <% } %>
                    </div>

                    <div class="form-group">
                        <label for="district">District</label>
                        <select id="district" name="district" class="<%= errors.district ? 'error' : '' %>"></select>
                        <% if (errors.district) { %>
                            <span class="error-message">
                                <%= errors.district %>
                            </span>
                            <% } %>
                    </div>




                    <div class="form-group">
                        <label for="pinCode">Pin Code</label>
                        <input type="text" id="pinCode" name="pinCode" placeholder="Enter pin code"
                            value="<%= formData.pinCode || '' %>" class="<%= errors.pinCode ? 'error' : '' %>">
                        <% if (errors.pinCode) { %>
                            <span class="error-message">
                                <%= errors.pinCode %>
                            </span>
                            <% } %>
                    </div>

                    <div class="form-group">
                        <label for="landmark">Landmark</label>
                        <input type="text" id="landmark" name="landmark" placeholder="Enter landmark"
                            value="<%= formData.landmark || '' %>" class="<%= errors.landmark ? 'error' : '' %>">

                        <% if (errors.landmark) { %>
                            <span class="error-message">
                                <%= errors.landmark %>
                            </span>
                            <% } %>
                    </div>



                    <div class="address-type">

                        <h3>Address Type</h3>
                        <div class="address-options">
                            <button type="button"
                                class="address-btn <%= (!formData.addressType || formData.addressType === 'home') ? 'active' : '' %>"
                                data-type="home">Home</button>
                            <button type="button"
                                class="address-btn <%= formData.addressType === 'office' ? 'active' : '' %>"
                                data-type="office">Office</button>
                            <button type="button"
                                class="address-btn <%= formData.addressType === 'other' ? 'active' : '' %>"
                                data-type="other">Other</button>
                        </div>
                        <input type="hidden" id="addressType" name="addressType"
                            value="<%= formData.addressType || 'home' %>">
                        <% if (errors.addressType) { %>
                            <span class="error-message">
                                <%= errors.addressType %>
                            </span>
                            <% } %>
                    </div>
                    <input type="hidden" name="returnUrl" value="<%= returnURL %>">


                    <div class="modal-actions">
                        <button type="button" class="btn btn-secondary" id="cancelModal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Save Address</button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Edit Address Modal -->
        <div class="modal" id="editAddressModal">
            <div class="modal-content">
                <span class="modal-close" id="closeEditModal">&times;</span>
                <div class="modal-header">
                    <span class="material-icons">edit_location</span>
                    <h2>Edit Address</h2>
                </div>
                <form class="address-form" id="editAddressForm">
                    <input type="hidden" id="editAddressId" name="addressId">

                    <div class="form-group">
                        <label for="editFullName">Full Name</label>
                        <input type="text" id="editFullName" name="fullName" placeholder="Enter your full name">
                        <span class="error-message" id="editFullNameError" style="display: none;"></span>
                    </div>

                    <div class="form-group">
                        <label for="editMobileNumber">Mobile Number</label>
                        <div class="phone-input-container">
                            <select id="editCountryCode" name="countryCode" class="country-code-select">
                                <option value="+91" data-flag="🇮🇳">🇮🇳 +91</option>
                                <option value="+1" data-flag="🇺🇸">🇺🇸 +1</option>
                                <option value="+44" data-flag="🇬🇧">🇬🇧 +44</option>
                                <option value="+61" data-flag="🇦🇺">🇦🇺 +61</option>
                                <option value="+81" data-flag="🇯🇵">🇯🇵 +81</option>
                                <option value="+86" data-flag="🇨🇳">🇨🇳 +86</option>
                                <option value="+33" data-flag="🇫🇷">🇫🇷 +33</option>
                                <option value="+49" data-flag="🇩🇪">🇩🇪 +49</option>
                                <option value="+7" data-flag="🇷🇺">🇷🇺 +7</option>
                                <option value="+55" data-flag="🇧🇷">🇧🇷 +55</option>
                                <option value="+82" data-flag="🇰🇷">🇰🇷 +82</option>
                                <option value="+34" data-flag="🇪🇸">🇪🇸 +34</option>
                                <option value="+39" data-flag="🇮🇹">🇮🇹 +39</option>
                                <option value="+31" data-flag="🇳🇱">🇳🇱 +31</option>
                                <option value="+41" data-flag="🇨🇭">🇨🇭 +41</option>
                            </select>
                            <input type="tel" id="editMobileNumber" name="mobileNumber"
                                placeholder="Enter mobile number" class="phone-number-input">
                        </div>
                        <span class="error-message" id="editMobileNumberError" style="display: none;"></span>
                    </div>

                    <div class="form-group">
                        <label for="editAddress">Address</label>
                        <textarea id="editAddress" name="address" placeholder="Enter your complete address"
                            rows="3"></textarea>
                        <span class="error-message" id="editAddressError" style="display: none;"></span>
                    </div>

                    <div class="form-group">
                        <label for="editCity">City</label>
                        <input type="text" id="editCity" name="city" placeholder="Enter city">
                        <span class="error-message" id="editCityError" style="display: none;"></span>
                    </div>

                    <div class="form-group">
                        <label for="editState">State</label>
                        <select id="editState" name="state" class="<%= errors.state ? 'error' : '' %>">
                            <option value="Karnataka">Karnataka</option>
                            <option value="Kerala">Kerala</option>
                            <option value="Tamil Nadu">Tamil Nadu</option>
                            <option value="Delhi">Delhi</option>
                        </select>
                        <span class="error-message" id="editStateError" style="display: none;"></span>
                    </div>
                    <div class="form-group">
                        <label for="editDistrict">District</label>
                        <select id="editDistrict" name="district"
                            class="<%= errors.district ? 'error' : '' %>"></select>
                        <span class="error-message" id="editDistrictError" style="display: none;"></span>
                    </div>




                    <div class="form-group">
                        <label for="editPinCode">Pin Code</label>
                        <input type="text" id="editPinCode" name="pinCode" placeholder="Enter pin code">
                        <span class="error-message" id="editPinCodeError" style="display: none;"></span>
                    </div>

                    <div class="form-group">
                        <label for="editLandmark">Landmark (Optional)</label>
                        <input type="text" id="editLandmark" name="landmark" placeholder="Enter landmark">
                        <span class="error-message" id="editLandmarkError" style="display: none;"></span>
                    </div>

                    <div class="address-type">
                        <h3>Address Type</h3>
                        <div class="address-options">
                            <button type="button" class="edit-address-btn" data-type="home">Home</button>
                            <button type="button" class="edit-address-btn" data-type="office">Office</button>
                            <button type="button" class="edit-address-btn" data-type="other">Other</button>
                        </div>
                        <input type="hidden" id="editAddressType" name="addressType" value="home">
                        <span class="error-message" id="editAddressTypeError" style="display: none;"></span>
                    </div>

                    <div class="modal-actions">
                        <button type="button" class="btn btn-secondary" id="cancelEditModal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Update Address</button>
                    </div>
                </form>
            </div>
        </div>

        <%- include("../partials/user/userfooter") %>

            <script>
                // Store original address data for comparison
                let originalAddressData = {};

                // Show SweetAlert success message if present in URL
                const urlParams = new URLSearchParams(window.location.search);
                const successParam = urlParams.get('success');
                if (successParam === 'true') {
                    Swal.fire({
                        title: 'Success!',
                        text: 'Address added successfully',
                        icon: 'success',
                        confirmButtonText: 'OK',
                        confirmButtonColor: '#28a745'
                    })
                }

    // Show modal if there are validation errors
    <% if (Object.keys(errors).length > 0) { %>
                    document.getElementById('addressModal').style.display = 'flex';
                    document.body.style.overflow = 'hidden';
    <% } %>

                    // Function to safely trim strings (handles null/undefined)
                    function safeTrim(value) {
                        return value ? value.toString().trim() : '';
                    }

                // Function to clear form data and errors for fresh form
                function clearForm() {
                    // Clear all input values
                    document.getElementById('fullName').value = '';
                    document.getElementById('mobileNumber').value = '';
                    document.getElementById('address').value = '';
                    document.getElementById('city').value = '';
                    document.getElementById('district').value = '';
                    document.getElementById('state').value = '';
                    document.getElementById('pinCode').value = '';
                    document.getElementById('landmark').value = '';
                    document.getElementById('addressType').value = 'home';
                    document.getElementById('countryCode').value = '+91';

                    // Remove error classes from all inputs
                    document.querySelectorAll('.form-group input, .form-group textarea, .form-group select').forEach(input => {
                        input.classList.remove('error');
                    });

                    // Hide all error messages
                    document.querySelectorAll('.error-message').forEach(errorMsg => {
                        errorMsg.style.display = 'none';
                    });

                    // Reset address type buttons to default (home)
                    document.querySelectorAll('.address-btn').forEach(btn => btn.classList.remove('active'));
                    document.querySelector('.address-btn[data-type="home"]').classList.add('active');
                }

                // Function to parse mobile number and set country code
                function parseMobileNumber(fullNumber) {
                    // Common country codes to check
                    const countryCodes = ['+91', '+1', '+44', '+61', '+81', '+86', '+33', '+49', '+7', '+55', '+82', '+34', '+39', '+31', '+41'];

                    if (!fullNumber) {
                        return {
                            countryCode: '+91',
                            number: ''
                        };
                    }

                    for (let code of countryCodes) {
                        if (fullNumber.startsWith(code)) {
                            return {
                                countryCode: code,
                                number: fullNumber.substring(code.length)
                            };
                        }
                    }

                    // Default to +91 if no code found
                    return {
                        countryCode: '+91',
                        number: fullNumber
                    };
                }

                // Modal controls
                document.querySelectorAll('#openModal').forEach(button => {
                    button.addEventListener('click', function () {
                        // Always clear form when user clicks "Add New Address" for a fresh start
                        clearForm();
                        document.getElementById('addressModal').style.display = 'flex';
                        document.body.style.overflow = 'hidden';
                    });
                });

                document.getElementById('closeModal').addEventListener('click', function () {
                    document.getElementById('addressModal').style.display = 'none';
                    document.body.style.overflow = 'auto';
                });

                document.getElementById('cancelModal').addEventListener('click', function () {
                    document.getElementById('addressModal').style.display = 'none';
                    document.body.style.overflow = 'auto';
                });

                // Address type selection for Add modal
                document.querySelectorAll('.address-btn').forEach(button => {
                    button.addEventListener('click', function () {
                        document.querySelectorAll('.address-btn').forEach(btn => btn.classList.remove('active'));
                        this.classList.add('active');
                        document.getElementById('addressType').value = this.getAttribute('data-type');
                    });
                });

                // Form submission - Combine country code and mobile number
                document.querySelector('.address-form').addEventListener('submit', function (e) {
                    const countryCode = document.getElementById('countryCode').value;
                    const mobileNumber = document.getElementById('mobileNumber').value;

                    // Combine country code and mobile number
                    const fullMobileNumber = countryCode + mobileNumber;

                    // Create a hidden input with the full mobile number
                    const hiddenInput = document.createElement('input');
                    hiddenInput.type = 'hidden';
                    hiddenInput.name = 'fullMobileNumber';
                    hiddenInput.value = fullMobileNumber;
                    this.appendChild(hiddenInput);
                });

                // Edit address functionality - FIXED VERSION
                document.querySelectorAll('.edit-btn').forEach(button => {
                    button.addEventListener('click', function () {
                        const addressId = this.getAttribute('data-address-id');
                        const fullName = this.getAttribute('data-full-name') || '';
                        const mobileNumber = this.getAttribute('data-mobile-number') || '';
                        const address = this.getAttribute('data-address') || '';
                        const city = this.getAttribute('data-city') || '';
                        const district = this.getAttribute('data-district') || '';
                        const state = this.getAttribute('data-state') || '';
                        const pinCode = this.getAttribute('data-pin-code') || '';
                        const landmark = this.getAttribute('data-landmark') || '';
                        const addressType = this.getAttribute('data-address-type') || 'home';

                        // Parse mobile number to separate country code and number
                        const parsedMobile = parseMobileNumber(mobileNumber);

                        // Store original data for comparison - FIXED: Store the combination that will be used for comparison
                        const originalCombinedMobile = parsedMobile.countryCode + parsedMobile.number;

                        originalAddressData = {
                            fullName: safeTrim(fullName),
                            mobileNumber: originalCombinedMobile, // Store the recombined version for accurate comparison
                            address: safeTrim(address),
                            city: safeTrim(city),
                            district: safeTrim(district),
                            state: safeTrim(state),
                            pinCode: safeTrim(pinCode),
                            landmark: safeTrim(landmark),
                            addressType: safeTrim(addressType)
                        };

                        // Populate edit form with existing data
                        document.getElementById('editAddressId').value = addressId;
                        document.getElementById('editFullName').value = fullName;
                        document.getElementById('editCountryCode').value = parsedMobile.countryCode;
                        document.getElementById('editMobileNumber').value = parsedMobile.number;
                        document.getElementById('editAddress').value = address;
                        document.getElementById('editCity').value = city;
                        document.getElementById('editDistrict').value = district;
                        document.getElementById('editState').value = state;
                        document.getElementById('editPinCode').value = pinCode;
                        document.getElementById('editLandmark').value = landmark;
                        document.getElementById('editAddressType').value = addressType;

                        // Clear all active states first
                        document.querySelectorAll('.edit-address-btn').forEach(btn => btn.classList.remove('active'));

                        // Set active address type button
                        const activeButton = document.querySelector(`.edit-address-btn[data-type="${addressType}"]`);
                        if (activeButton) {
                            activeButton.classList.add('active');
                        }

                        // Show edit modal
                        document.getElementById('editAddressModal').style.display = 'flex';
                        document.body.style.overflow = 'hidden';
                    });
                });

                // Edit modal controls
                document.getElementById('closeEditModal').addEventListener('click', function () {
                    document.getElementById('editAddressModal').style.display = 'none';
                    document.body.style.overflow = 'auto';
                });

                document.getElementById('cancelEditModal').addEventListener('click', function () {
                    document.getElementById('editAddressModal').style.display = 'none';
                    document.body.style.overflow = 'auto';
                });

                // Edit address type selection - Fixed event listener
                document.addEventListener('click', function (e) {
                    if (e.target.classList.contains('edit-address-btn')) {
                        // Remove active class from all edit address buttons
                        document.querySelectorAll('.edit-address-btn').forEach(btn => btn.classList.remove('active'));

                        // Add active class to clicked button
                        e.target.classList.add('active');

                        // Update hidden input value
                        document.getElementById('editAddressType').value = e.target.getAttribute('data-type');
                    }
                });

                // Select Address functionality
                document.querySelectorAll('.select-address').forEach(button => {
                    button.addEventListener('click', async function () {
                        if (this.disabled) return; // Don't do anything if already default

                        const addressId = this.getAttribute('data-address-id');

                        try {
                            const response = await fetch(`/profile/set-default/${addressId}`, {
                                method: 'PATCH',
                                headers: {
                                    'Content-Type': 'application/json',
                                }
                            });

                            const result = await response.json();

                            if (result.success) {
                                // Show success message and reload page
                                Swal.fire({
                                    title: 'Success!',
                                    text: 'Default address updated successfully',
                                    icon: 'success',
                                    confirmButtonText: 'OK',
                                    confirmButtonColor: '#28a745'
                                }).then(() => {
                                    window.location.reload();
                                });
                            } else {
                                // Show error message
                                Swal.fire({
                                    title: 'Error!',
                                    text: result.message || 'Failed to set default address',
                                    icon: 'error',
                                    confirmButtonText: 'OK',
                                    confirmButtonColor: '#dc3545'
                                });
                            }
                        } catch (error) {
                            console.error('Error setting default address:', error);
                            Swal.fire({
                                title: 'Error!',
                                text: 'Something went wrong. Please try again.',
                                icon: 'error',
                                confirmButtonText: 'OK',
                                confirmButtonColor: '#dc3545'
                            });
                        }
                    });
                });

                // Delete address functionality
                document.querySelectorAll('.delete-btn').forEach(button => {
                    button.addEventListener('click', async function () {
                        const addressId = this.getAttribute('data-address-id');
                        const isDefaultAddress = this.getAttribute('data-is-default') === 'true';
                        const addressCard = this.closest('.address-card');
                        const totalAddresses = document.querySelectorAll('.address-card').length;

                        // Show SweetAlert confirmation
                        const result = await Swal.fire({
                            title: 'Delete Address',
                            text: 'Do you want to delete this address?',
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#dc3545',
                            cancelButtonColor: '#6c757d',
                            confirmButtonText: 'OK',
                            cancelButtonText: 'Cancel'
                        });

                        // If user clicked OK, proceed with deletion
                        if (result.isConfirmed) {
                            try {
                                const response = await fetch(`/profile/delete/${addressId}`, {
                                    method: 'PATCH',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    }
                                });

                                const deleteResult = await response.json();

                                if (deleteResult.success) {
                                    // Remove the address card from DOM with animation
                                    addressCard.style.transition = 'all 0.3s ease';
                                    addressCard.style.opacity = '0';
                                    addressCard.style.transform = 'scale(0.9)';

                                    setTimeout(() => {
                                        addressCard.remove();

                                        // Check if there are no more addresses left
                                        const remainingAddresses = document.querySelectorAll('.address-card');
                                        if (remainingAddresses.length === 0) {
                                            // Show empty state
                                            const addressesGrid = document.querySelector('.addresses-grid');
                                            if (addressesGrid) {
                                                addressesGrid.innerHTML = `
                                        <div class="empty-state">
                                            <div class="empty-icon">
                                                <span class="material-icons">location_off</span>
                                            </div>
                                            <h3>No addresses found</h3>
                                            <p>You haven't added any delivery locations to your account yet.</p>
                                            <button class="btn btn-large btn-primary" id="openModal">Add Your First Address</button>
                                        </div>
                                    `;

                                                // Re-attach event listener for the new "Add Your First Address" button
                                                document.getElementById('openModal').addEventListener('click', function () {
                                                    clearForm();
                                                    document.getElementById('addressModal').style.display = 'flex';
                                                    document.body.style.overflow = 'hidden';
                                                });
                                            }
                                        } else if (isDefaultAddress && totalAddresses > 1) {
                                            // If a default address was deleted and there are remaining addresses,
                                            // reload the page to show the new default address in the correct position
                                            setTimeout(() => {
                                                window.location.reload();
                                            }, 1000);
                                        }
                                    }, 300);

                                    // Show success message with appropriate text
                                    let successMessage = 'Address deleted successfully';
                                    if (isDefaultAddress && totalAddresses > 1) {
                                        successMessage = 'Address deleted successfully. The oldest address has been set as your new default.';
                                    }

                                    Swal.fire({
                                        title: 'Deleted!',
                                        text: successMessage,
                                        icon: 'success',
                                        confirmButtonText: 'OK',
                                        confirmButtonColor: '#28a745'
                                    });
                                } else {
                                    // Show error message
                                    Swal.fire({
                                        title: 'Error!',
                                        text: deleteResult.message || 'Failed to delete address',
                                        icon: 'error',
                                        confirmButtonText: 'OK',
                                        confirmButtonColor: '#dc3545'
                                    });
                                }
                            } catch (error) {
                                console.error('Error deleting address:', error);
                                Swal.fire({
                                    title: 'Error!',
                                    text: 'Something went wrong. Please try again.',
                                    icon: 'error',
                                    confirmButtonText: 'OK',
                                    confirmButtonColor: '#dc3545'
                                });
                            }
                        }
                        // If user clicked Cancel, do nothing (SweetAlert handles this automatically)
                    });
                });

                // Edit form submission - CORRECTED VERSION
                document.getElementById('editAddressForm').addEventListener('submit', async function (e) {
                    e.preventDefault();

                    try {
                        // Get address ID from hidden input
                        const addressId = document.getElementById('editAddressId').value;

                        if (!addressId) {
                            throw new Error('Address ID not found');
                        }

                        // Get form values directly from DOM elements to ensure accuracy
                        const countryCode = document.getElementById('editCountryCode').value || '+91';
                        const mobileNumberValue = document.getElementById('editMobileNumber').value || '';
                        const fullMobileNumber = countryCode + mobileNumberValue;

                        // Get current form data with safe handling
                        const currentData = {
                            fullName: safeTrim(document.getElementById('editFullName').value),
                            mobileNumber: fullMobileNumber, // This should now match the format stored in originalAddressData
                            address: safeTrim(document.getElementById('editAddress').value),
                            city: safeTrim(document.getElementById('editCity').value),
                            district: safeTrim(document.getElementById('editDistrict').value),
                            state: safeTrim(document.getElementById('editState').value),
                            pinCode: safeTrim(document.getElementById('editPinCode').value),
                            landmark: safeTrim(document.getElementById('editLandmark').value),
                            addressType: document.getElementById('editAddressType').value || 'home'
                        };

                        // Check if data has changed - Now the comparison should work correctly
                        const hasChanged = Object.keys(currentData).some(key => {
                            const currentValue = currentData[key];
                            const originalValue = originalAddressData[key];
                            return currentValue !== originalValue;
                        });

                        if (!hasChanged) {
                            // Show "No changes made" message with high z-index
                            Swal.fire({
                                title: 'No Changes!',
                                text: 'No changes made',
                                icon: 'info',
                                confirmButtonText: 'OK',
                                confirmButtonColor: '#17a2b8',
                                didOpen: () => {
                                    // Ensure SweetAlert appears above modal
                                    const swalContainer = document.querySelector('.swal2-container');
                                    if (swalContainer) {
                                        swalContainer.style.zIndex = '99999';
                                    }
                                }
                            });
                            return;
                        }

                        // Clear previous error messages
                        document.querySelectorAll('#editAddressModal .error-message').forEach(error => {
                            error.style.display = 'none';
                            error.textContent = '';
                        });

                        // Remove error classes
                        document.querySelectorAll('#editAddressModal input, #editAddressModal textarea, #editAddressModal select').forEach(input => {
                            input.classList.remove('error');
                        });

                        // Make the API request
                        const response = await fetch(`/profile/update/${addressId}`, {
                            method: 'PATCH',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(currentData)
                        });

                        const result = await response.json();

                        if (result.success) {
                            // Close modal
                            document.getElementById('editAddressModal').style.display = 'none';
                            document.body.style.overflow = 'auto';

                            // Show success message and reload page
                            Swal.fire({
                                title: 'Success!',
                                text: 'Address updated successfully!',
                                icon: 'success',
                                confirmButtonText: 'OK',
                                confirmButtonColor: '#28a745'
                            }).then(() => {
                                window.location.reload();
                            });
                        } else {
                            if (result.errors) {
                                // Display field-specific errors
                                Object.keys(result.errors).forEach(field => {
                                    const errorElement = document.getElementById(`edit${field.charAt(0).toUpperCase() + field.slice(1)}Error`);
                                    const inputElement = document.getElementById(`edit${field.charAt(0).toUpperCase() + field.slice(1)}`);

                                    if (errorElement && inputElement) {
                                        errorElement.textContent = result.errors[field];
                                        errorElement.style.display = 'block';
                                        inputElement.classList.add('error');
                                    }
                                });
                            } else {
                                // Show general error message
                                Swal.fire({
                                    title: 'Error!',
                                    text: result.message || 'Failed to update address',
                                    icon: 'error',
                                    confirmButtonText: 'OK',
                                    confirmButtonColor: '#dc3545'
                                });
                            }
                        }
                    } catch (error) {
                        console.error('Error updating address:', error);
                        Swal.fire({
                            title: 'Error!',
                            text: 'Something went wrong. Please try again.',
                            icon: 'error',
                            confirmButtonText: 'OK',
                            confirmButtonColor: '#dc3545'
                        });
                    }
                });

                const stateDistrictMap = {
                    "Kerala": [
                        "Alappuzha", "Ernakulam", "Idukki", "Kannur", "Kasaragod", "Kollam",
                        "Kottayam", "Kozhikode", "Malappuram", "Palakkad", "Pathanamthitta",
                        "Thiruvananthapuram", "Thrissur", "Wayanad"
                    ],
                    "Delhi": [
                        "Central Delhi", "East Delhi", "New Delhi", "North Delhi", "North East Delhi",
                        "North West Delhi", "Shahdara", "South Delhi", "South East Delhi",
                        "South West Delhi", "West Delhi"
                    ],
                    "Karnataka": [
                        "Bagalkot", "Ballari", "Belagavi", "Bengaluru Rural", "Bengaluru Urban",
                        "Bidar", "Chamarajanagar", "Chikballapur", "Chikkamagaluru", "Chitradurga",
                        "Davanagere", "Dharwad", "Gadag", "Hassan", "Haveri",
                        "Kalaburagi", "Kodagu", "Kolar", "Koppal", "Mandya",
                        "Mysuru", "Raichur", "Ramanagara", "Shimoga", "Tumakuru",
                        "Udupi", "Uttara Kannada", "Vijayapura", "Yadgir"
                    ],
                    "Tamil Nadu": [
                        "Ariyalur", "Chengalpattu", "Chennai", "Coimbatore", "Cuddalore",
                        "Dharmapuri", "Dindigul", "Erode", "Kallakurichi", "Kancheepuram",
                        "Karur", "Krishnagiri", "Madurai", "Nagapattinam", "Namakkal",
                        "Nilgiris", "Perambalur", "Pudukkottai", "Ramanathapuram", "Ranipet",
                        "Salem", "Sivaganga", "Thanjavur", "Theni", "Thoothukudi",
                        "Tiruchirappalli", "Tirunelveli", "Tirupattur", "Tiruppur", "Tiruvallur",
                        "Tiruvannamalai", "Tiruvarur", "Vellore", "Viluppuram", "Virudhunagar"
                    ]
                };

                const stateSelect = document.getElementById('state');
                const districtSelect = document.getElementById('district');

                function populateDistricts() {
                    const state = stateSelect.value;
                    const districts = stateDistrictMap[state] || [];

                    districtSelect.innerHTML = '';
                    districts.forEach(district => {
                        const option = document.createElement('option');
                        option.value = district;
                        option.textContent = district;
                        districtSelect.appendChild(option);
                    });

                    // If you want to set a default based on previous selection (optional)
                    const selectedDistrict = "<%= formData.district || '' %>";
                    if (selectedDistrict) {
                        for (let option of districtSelect.options) {
                            if (option.value === selectedDistrict) {
                                option.selected = true;
                                break;
                            }
                        }
                    }
                }

                // Update districts when state changes
                stateSelect.addEventListener('change', populateDistricts);

                // Initialize districts on page load
                window.addEventListener('DOMContentLoaded', populateDistricts);
                // Existing stateDistrictMap variable assumed to be present here

                const editStateSelect = document.getElementById('editState');
                const editDistrictSelect = document.getElementById('editDistrict');

                function populateEditDistricts() {
                    const state = editStateSelect.value;
                    const districts = stateDistrictMap[state] || [];

                    // Clear current districts
                    editDistrictSelect.innerHTML = '';

                    // Populate district options
                    districts.forEach(district => {
                        const option = document.createElement('option');
                        option.value = district;
                        option.textContent = district;
                        editDistrictSelect.appendChild(option);
                    });

                    // Select the original district if available
                    const selectedDistrict = originalAddressData.district || '';
                    if (selectedDistrict) {
                        for (let option of editDistrictSelect.options) {
                            if (option.value === selectedDistrict) {
                                option.selected = true;
                                break;
                            }
                        }
                    }
                }

                // Listen to changes in state dropdown within Edit modal
                editStateSelect.addEventListener('change', () => {
                    // Clear the originalAddressData.district on manual change so user selects new district
                    originalAddressData.district = '';
                    populateEditDistricts();
                });

                // Modify existing edit button click handler to call populateEditDistricts after setting state
                document.querySelectorAll('.edit-btn').forEach(button => {
                    button.addEventListener('click', function () {
                        const addressId = this.getAttribute('data-address-id');
                        const fullName = this.getAttribute('data-full-name') || '';
                        const mobileNumber = this.getAttribute('data-mobile-number') || '';
                        const address = this.getAttribute('data-address') || '';
                        const city = this.getAttribute('data-city') || '';
                        const district = this.getAttribute('data-district') || '';
                        const state = this.getAttribute('data-state') || '';
                        const pinCode = this.getAttribute('data-pin-code') || '';
                        const landmark = this.getAttribute('data-landmark') || '';
                        const addressType = this.getAttribute('data-address-type') || 'home';

                        // Parse mobile number country code and number (assuming parseMobileNumber exists)
                        const parsedMobile = parseMobileNumber(mobileNumber);
                        const originalCombinedMobile = parsedMobile.countryCode + parsedMobile.number;

                        originalAddressData = {
                            fullName: safeTrim(fullName),
                            mobileNumber: originalCombinedMobile,
                            address: safeTrim(address),
                            city: safeTrim(city),
                            district: safeTrim(district),
                            state: safeTrim(state),
                            pinCode: safeTrim(pinCode),
                            landmark: safeTrim(landmark),
                            addressType: safeTrim(addressType)
                        };

                        // Set Edit modal form values
                        document.getElementById('editAddressId').value = addressId;
                        document.getElementById('editFullName').value = fullName;
                        document.getElementById('editCountryCode').value = parsedMobile.countryCode;
                        document.getElementById('editMobileNumber').value = parsedMobile.number;
                        document.getElementById('editAddress').value = address;
                        document.getElementById('editCity').value = city;
                        document.getElementById('editPinCode').value = pinCode;
                        document.getElementById('editLandmark').value = landmark;
                        document.getElementById('editAddressType').value = addressType;

                        // Set state select BEFORE populating districts
                        editStateSelect.value = state;

                        // Populate district dropdown and select current district
                        populateEditDistricts();

                        // Set active address type button (existing code)
                        document.querySelectorAll('.edit-address-btn').forEach(btn => btn.classList.remove('active'));
                        const activeButton = document.querySelector(`.edit-address-btn[data-type="${addressType}"]`);
                        if (activeButton) activeButton.classList.add('active');

                        // Show the Edit modal
                        document.getElementById('editAddressModal').style.display = 'flex';
                        document.body.style.overflow = 'hidden';
                    });
                });

            </script>



</body>

</html>