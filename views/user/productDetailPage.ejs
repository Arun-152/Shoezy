<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= product.productName %> - Shoezy</title>
    <link rel="stylesheet" href="/css/productDetailPage.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background-color: #f8f9fa;
            color: #333;
            padding-top: 80px; /* Add padding to prevent navbar overlap */
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }

        /* Enhanced Breadcrumb Styles */
        .breadcrumb {
            padding: 1.2rem 0;
            background: #ffffff;
            border-bottom: 2px solid #e9ecef;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            margin-top: 0;
            position: relative;
            z-index: 100;
        }

        .breadcrumb-list {
            display: flex;
            list-style: none;
            gap: 0.8rem;
            align-items: center;
            margin: 0;
            padding: 0;
            font-size: 0.95rem;
        }

        .breadcrumb-list li {
            display: flex;
            align-items: center;
        }

        .breadcrumb-list a {
            color: #2f3b47;
            text-decoration: none;
            font-weight: 500;
            padding: 0.3rem 0.5rem;
            border-radius: 4px;
            transition: all 0.3s ease;
        }

        .breadcrumb-list a:hover {
            background-color: #e3f2fd;
            color: #0056b3;
            text-decoration: underline;
        }

        .breadcrumb-separator {
            color: #6c757d;
            font-weight: bold;
            margin: 0 0.2rem;
        }

        /* Current page styling (last breadcrumb item) */
        .breadcrumb-list li:last-child {
            color: #495057;
            font-weight: 600;
            background-color: #f8f9fa;
            padding: 0.3rem 0.5rem;
            border-radius: 4px;
            border: 1px solid #dee2e6;
        }

        /* Product Offer Section */
        .offer-section {
            margin: 1.5rem 0;
        }

        .offer-badge-large {
            background: linear-gradient(135deg, #ff6b6b, #ee5a24);
            color: white;
            padding: 15px 25px;
            border-radius: 15px;
            display: flex;
            align-items: center;
            gap: 12px;
            box-shadow: 0 8px 25px rgba(255,107,107,0.3);
            position: relative;
            overflow: hidden;
            animation: offerPulse 3s infinite;
        }

        .offer-badge-large::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
            animation: shine 2s infinite;
        }

        @keyframes offerPulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.02); }
        }

        @keyframes shine {
            0% { left: -100%; }
            100% { left: 100%; }
        }

        .offer-badge-large i {
            font-size: 20px;
            animation: fire 1.5s infinite alternate;
        }

        @keyframes fire {
            0% { transform: scale(1) rotate(-5deg); }
            100% { transform: scale(1.1) rotate(5deg); }
        }

        .offer-text {
            font-size: 14px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .offer-percent {
            font-size: 18px;
            font-weight: 800;
            background: rgba(255,255,255,0.2);
            padding: 5px 12px;
            border-radius: 20px;
            margin-left: auto;
        }

        /* Enhanced Product Status Badge */
        .product-status {
            margin: 1.5rem 0;
        }

        .status-badge {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 10px 18px;
            border-radius: 20px;
            font-size: 13px;
            font-weight: 600;
            box-shadow: 0 2px 12px rgba(0,0,0,0.08);
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .status-badge.available {
            background: rgba(34, 197, 94, 0.9);
            color: white;
        }

        .status-badge.out-of-stock {
            background: rgba(239, 68, 68, 0.9);
            color: white;
        }

        .status-badge i {
            font-size: 14px;
            line-height: 1;
        }

        .status-badge:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 20px rgba(0,0,0,0.12);
        }

        /* Enhanced Product Detail */
        .product-detail {
            padding: 2rem 0;
            background: #fafbfc;
            margin-top: 0; /* Remove margin to connect with breadcrumb */
            min-height: 100vh;
        }

        .product-main {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 4rem;
            margin-bottom: 4rem;
            align-items: start;
            padding: 3rem;
            background: #ffffff;
            border-radius: 20px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            border: 1px solid #f1f3f4;
            max-width: 1200px;
            margin: 0 auto 4rem auto;
        }

        .product-images {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
            position: sticky;
            top: 100px;
        }

        /* Enhanced Image Zoom Container */
        .image-zoom-container {
            position: relative;
            width: 100%;
            height: 500px;
            overflow: hidden;
            border-radius: 16px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
            cursor: crosshair;
            background: #f8f9fa;
            border: 1px solid #f1f3f4;
        }

        .main-image {
            width: 100%;
            height: 100%;
            object-fit: contain;
            border-radius: 16px;
            transition: transform 0.3s ease;
            padding: 20px;
        }

        .image-zoom-container:hover .main-image {
            transform: scale(1.02);
        }

        /* Zoom Lens */
        .zoom-lens {
            position: absolute;
            border: 2px solid #007bff;
            border-radius: 50%;
            width: 150px;
            height: 150px;
            background: rgba(255, 255, 255, 0.3);
            backdrop-filter: blur(1px);
            pointer-events: none;
            opacity: 0;
            transition: opacity 0.3s ease;
            z-index: 10;
        }

        /* Zoom Result Box */
        .zoom-result {
            position: absolute;
            top: 0;
            right: -320px;
            width: 300px;
            height: 300px;
            border: 2px solid #007bff;
            border-radius: 10px;
            background: white;
            box-shadow: 0 8px 25px rgba(0,0,0,0.2);
            overflow: hidden;
            opacity: 0;
            transition: opacity 0.3s ease;
            z-index: 1000;
            pointer-events: none;
        }

        .zoom-result img {
            position: absolute;
            width: 600px;
            height: 600px;
            object-fit: cover;
            transform-origin: top left;
        }

        /* Show zoom elements on hover - removed as we'll handle this with JavaScript */
        .image-zoom-container.zoom-active .zoom-lens,
        .image-zoom-container.zoom-active .zoom-result {
            opacity: 1;
        }

        /* Fallback zoom effect */
        .image-zoom-container:hover .main-image {
            transform: scale(1.05);
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .zoom-result {
                display: none;
            }

            .image-zoom-container {
                cursor: default;
            }

            .main-image:hover {
                transform: scale(1.1);
            }
        }

        .thumbnail-images {
            display: flex;
            gap: 1rem;
            overflow-x: auto;
            padding: 0.5rem 0;
            scrollbar-width: thin;
        }

        .thumbnail-images::-webkit-scrollbar {
            height: 4px;
        }

        .thumbnail-images::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 2px;
        }

        .thumbnail-images::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 2px;
        }

        .thumbnail {
            width: 80px;
            height: 80px;
            object-fit: contain;
            flex-shrink: 0;
            padding: 0.5rem;
            border-radius: 5px;
            cursor: pointer;
            border: 2px solid transparent;
            transition: border-color 0.3s;
        }

        .thumbnail:hover,
        .thumbnail.active {
            border-color: #007bff;
        }

        .product-info {
            padding: 0;
            background: transparent;
            height: fit-content;
        }

        .product-title {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            color: #1a1a1a;
            line-height: 1.2;
        }

        .product-category {
            color: #6b7280;
            margin-bottom: 1.5rem;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            font-weight: 500;
        }

        .product-rating {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 2rem;
            padding: 1rem;
            background: #f8f9fa;
            border-radius: 10px;
        }

        .stars {
            color: #ffc107;
            font-size: 1.1rem;
        }

        .rating-text {
            color: #666;
            font-weight: 500;
        }

        .product-price {
            margin-bottom: 2rem;
            padding: 1.5rem;
            background: #f8f9fa;
            border-radius: 12px;
            border: 1px solid #f1f3f4;
        }

        .current-price {
            font-size: 2.5rem;
            font-weight: 700;
            color: #1a1a1a;
            display: block;
            margin-bottom: 0.5rem;
        }

        .original-price {
            font-size: 1.2rem;
            color: #9ca3af;
            text-decoration: line-through;
            margin-left: 0.5rem;
            font-weight: 500;
        }

        .discount-badge {
            background: #ef4444;
            color: white;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.8rem;
            margin-left: 0.5rem;
        }

        .product-description {
            margin-bottom: 2rem;
        }

        .description-title {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .description-text {
            color: #666;
            line-height: 1.6;
        }

        .product-options {
            margin-bottom: 2rem;
        }

        .option-group {
            margin-bottom: 1.5rem;
        }

        .option-label {
            font-weight: 600;
            margin-bottom: 0.5rem;
            display: block;
        }

        .size-options {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }

        .size-option {
            padding: 0.5rem 1rem;
            border: 2px solid #ddd;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s;
            background: white;
        }

        .size-option:hover,
        .size-option.selected {
            border-color: #007bff;
            background: #007bff;
            color: white;
        }

        .size-option.disabled {
            background: #f8f9fa;
            color: #999;
            cursor: not-allowed;
            border-color: #ddd;
        }

        .quantity-selector {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .quantity-controls {
            display: flex;
            align-items: center;
            border: 2px solid #ddd;
            border-radius: 5px;
            overflow: hidden;
        }

        .quantity-btn {
            background: #f8f9fa;
            border: none;
            padding: 0.5rem 1rem;
            cursor: pointer;
            font-size: 1.2rem;
            transition: background 0.3s;
        }

        .quantity-btn:hover {
            background: #e9ecef;
        }

        .quantity-input {
            border: none;
            padding: 0.5rem;
            width: 60px;
            text-align: center;
            font-size: 1rem;
        }

        .product-actions {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .btn {
            padding: 1rem 2rem;
            border: none;
            border-radius: 5px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
            text-decoration: none;
            text-align: center;
            font-size: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-primary {
            background: #007bff;
            color: white;
            flex: 1;
        }

        .btn-primary:hover {
            background: #0056b3;
        }

        .btn-secondary {
            background: transparent;
            color: #007bff;
            border: 2px solid #007bff;
        }

        .btn-secondary:hover {
            background: #007bff;
            color: white;
        }

        .btn:disabled {
            background: #6c757d;
            cursor: not-allowed;
        }

        /* Related Products */
        .related-products {
            margin-top: 3rem;
        }

        .section-title {
            font-size: 1.8rem;
            font-weight: 700;
            margin-bottom: 2rem;
            text-align: center;
        }

        .products-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 2rem;
        }

        .product-card {
            background: white;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
            transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
            cursor: pointer;
            border: 1px solid rgba(0,0,0,0.05);
        }

        .product-card:hover {
            transform: translateY(-8px) scale(1.02);
            box-shadow: 0 20px 40px rgba(0,0,0,0.15);
            border-color: rgba(0,123,255,0.2);
        }

        .product-card-image-container {
            position: relative;
            overflow: hidden;
            height: 200px;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        }

        .product-card-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.4s ease;
        }

        .product-card:hover .product-card-image {
            transform: scale(1.1);
        }

        /* Related Product Offer Ribbon */
        .related-offer-ribbon {
            position: absolute;
            top: 10px;
            left: -8px;
            background: linear-gradient(135deg, #ff6b6b, #ee5a24);
            color: white;
            padding: 4px 12px 4px 8px;
            font-size: 10px;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            z-index: 10;
            box-shadow: 0 2px 8px rgba(255,107,107,0.4);
            clip-path: polygon(0 0, calc(100% - 6px) 0, 100% 50%, calc(100% - 6px) 100%, 0 100%);
        }

        /* Related Product Status Badge */
        .related-status-badge {
            position: absolute;
            bottom: 10px;
            right: 10px;
            width: 25px;
            height: 25px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            backdrop-filter: blur(10px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            z-index: 10;
        }

        .related-status-badge.available {
            background: rgba(40, 167, 69, 0.9);
            color: white;
        }

        .related-status-badge.out-of-stock {
            background: rgba(220, 53, 69, 0.9);
            color: white;
        }

        /* Related Product Wishlist Icon */
        .related-wishlist-icon {
            position: absolute;
            top: 10px;
            right: 10px;
            width: 30px;
            height: 30px;
            background: rgba(255,255,255,0.9);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            z-index: 10;
            backdrop-filter: blur(10px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .related-wishlist-icon:hover {
            background: #ff6b6b;
            color: white;
            transform: scale(1.1);
        }

        .related-wishlist-icon i {
            font-size: 12px;
            transition: all 0.3s ease;
        }

        .product-card-info {
            padding: 1rem;
        }

        .product-card-title {
            font-weight: 600;
            margin-bottom: 0.5rem;
            font-size: 14px;
            color: #2c3e50;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
            line-height: 1.3;
        }

        /* Related Product Price */
        .related-price-container {
            display: flex;
            align-items: center;
            gap: 8px;
            flex-wrap: wrap;
        }

        .related-current-price {
            color: #007bff;
            font-weight: 700;
            font-size: 16px;
        }

        .related-original-price {
            color: #95a5a6;
            text-decoration: line-through;
            font-size: 12px;
        }

        /* Responsive Design */
        @media (max-width: 1024px) {
            .product-main {
                gap: 2rem;
            }

            .product-images {
                position: static;
            }
        }

        @media (max-width: 768px) {
            body {
                padding-top: 70px;
            }

            .product-main {
                grid-template-columns: 1fr;
                gap: 1.5rem;
            }

            .product-info {
                padding: 1.5rem;
            }

            .product-title {
                font-size: 2rem;
            }

            .current-price {
                font-size: 2rem;
            }

            .image-zoom-container {
                height: 350px;
            }

            .product-actions {
                flex-direction: column;
                gap: 1rem;
            }

            .products-grid {
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 1rem;
            }

            .breadcrumb {
                padding: 0.8rem 0;
            }

            .breadcrumb-list {
                font-size: 0.85rem;
                gap: 0.5rem;
                flex-wrap: wrap;
            }
        }

        @media (max-width: 480px) {
            .container {
                padding: 0 15px;
            }

            .product-info {
                padding: 1rem;
            }

            .product-title {
                font-size: 1.8rem;
            }

            .current-price {
                font-size: 1.8rem;
            }

            .image-zoom-container {
                height: 300px;
            }

            .thumbnail {
                width: 60px;
                height: 60px;
            }

            .breadcrumb-list {
                font-size: 0.8rem;
                gap: 0.3rem;
            }

            .breadcrumb-list a,
            .breadcrumb-list li:last-child {
                padding: 0.2rem 0.3rem;
                font-size: 0.8rem;
            }
        }
    </style>
</head>
<body>
    <!-- Header -->
      <%- include("../partials/user/navbar") %>

    <!-- Enhanced Breadcrumb -->
    <div class="breadcrumb">
        <div class="container">
            <ul class="breadcrumb-list">
                <li><a href="/home"><i class="fas fa-home"></i> Home</a></li>
                <li class="breadcrumb-separator">></li>
                <li><a href="/shop">Shop</a></li>
                <li class="breadcrumb-separator">></li>
                <li><%= product.productName %></li>
            </ul>
        </div>
    </div>

    <!-- Product Detail -->
    <main class="product-detail">
        <div class="container">
            <div class="product-main">
                <!-- Product Images -->
                <div class="product-images">
                    <% if (product.images && product.images.length > 0) { %>
                        <!-- Image Zoom Container -->
                        <div class="image-zoom-container" id="imageZoomContainer">
                            <img src="<%= product.images[0] %>" alt="<%= product.productName %>" class="main-image" id="mainImage">
                            <!-- Zoom Lens -->
                            <div class="zoom-lens" id="zoomLens"></div>
                            <!-- Zoom Result Box -->
                            <div class="zoom-result" id="zoomResult">
                                <img src="<%= product.images[0] %>" alt="<%= product.productName %>" id="zoomImage">
                            </div>
                        </div>
                        <% if (product.images.length > 1) { %>
                            <div class="thumbnail-images">
                                <% product.images.forEach((image, index) => { %>
                                    <img src="<%= image %>" alt="<%= product.productName %>"
                                         class="thumbnail <%= index === 0 ? 'active' : '' %>"
                                         onclick="changeMainImage('<%= image %>', this)">
                                <% }); %>
                            </div>
                        <% } %>
                    <% } else { %>
                        <div class="image-zoom-container" id="imageZoomContainer">
                            <img src="https://via.placeholder.com/500x500/ffffff/cccccc?text=No+Image" alt="<%= product.productName %>" class="main-image" id="mainImage">
                            <div class="zoom-lens" id="zoomLens"></div>
                            <div class="zoom-result" id="zoomResult">
                                <img src="https://via.placeholder.com/500x500/ffffff/cccccc?text=No+Image" alt="<%= product.productName %>" id="zoomImage">
                            </div>
                        </div>
                    <% } %>
                </div>

                <!-- Product Info -->
                <div class="product-info">
                    <h1 class="product-title"><%= product.productName %></h1>
                    <p class="product-category"><%= product.category ? product.category.name : 'Uncategorized' %></p>

                    <!-- Product Offer Badge -->
                    <% if (product.bestOffer && product.bestOffer > 0) { %>
                        <div class="offer-section">
                            <div class="offer-badge-large">
                                <i class="fas fa-fire"></i>
                                <span class="offer-text">Limited Time Offer</span>
                                <span class="offer-percent"><%= product.bestOffer %>% OFF</span>
                            </div>
                        </div>
                    <% } %>

                    <!-- Product Status Badge -->
                    <div class="product-status">
                        <% if (product.status === 'Available') { %>
                            <span class="status-badge available">
                                <i class="fas fa-check-circle"></i>
                                <span>Available</span>
                            </span>
                        <% } else { %>
                            <span class="status-badge out-of-stock">
                                <i class="fas fa-times-circle"></i>
                                <span>Out of Stock</span>
                            </span>
                        <% } %>
                    </div>

                    <div class="product-rating">
                        <div class="stars">
                            <% const rating = product.ratings && product.ratings.average ? product.ratings.average : 4.5; %>
                            <% for (let i = 1; i <= 5; i++) { %>
                                <% if (i <= Math.floor(rating)) { %>
                                    <i class="fas fa-star"></i>
                                <% } else if (i - 0.5 <= rating) { %>
                                    <i class="fas fa-star-half-alt"></i>
                                <% } else { %>
                                    <i class="far fa-star"></i>
                                <% } %>
                            <% } %>
                        </div>
                        <span class="rating-text">(<%= product.ratings && product.ratings.count ? product.ratings.count : 0 %> reviews)</span>
                    </div>

                    <div class="product-price">
                        <% if (product.variants && product.variants.length > 0) { %>
                            <% 
                                const prices = product.variants.map(v => v.salePrice);
                                const originalPrices = product.variants.map(v => v.variantPrice);
                                const minSalePrice = Math.min(...prices);
                                const maxSalePrice = Math.max(...prices);
                                const minOriginalPrice = Math.min(...originalPrices);
                                const hasDiscount = minSalePrice < minOriginalPrice;
                            %>
                            <div class="price-display">
                                <span class="unit-price-label" style="font-size: 1rem; color: #666; display: block; margin-bottom: 0.5rem;">Unit Price:</span>
                                <span class="current-price" id="unitPrice">
                                    ₹<%= minSalePrice %>
                                </span>
                            </div>
                        <% } else { %>
                            <span class="current-price">Price not available</span>
                        <% } %>
                    </div>

                    <div class="product-description">
                        <h3 class="description-title">Description</h3>
                        <p class="description-text"><%= product.description %></p>
                        <% if (product.color) { %>
                            <p class="description-text"><strong>Color:</strong> <%= product.color %></p>
                        <% } %>
                    </div>

                    <div class="product-options">
                        <% if (product.variants && product.variants.length > 0) { %>
                            <div class="option-group">
                                <label class="option-label">Size:</label>
                                <div class="size-options">
                                    <% product.variants.forEach(variant => { %>
                                        <div class="size-option <%= variant.variantQuantity <= 0 ? 'disabled' : '' %>" 
                                             data-size="<%= variant.size %>" 
                                             data-price="<%= variant.salePrice %>" 
                                             data-original-price="<%= variant.variantPrice %>"
                                             data-quantity="<%= variant.variantQuantity %>"
                                             onclick="selectSize(this)">
                                            <%= variant.size %>
                                            <% if (variant.variantQuantity <= 0) { %>
                                                <small>(Out of Stock)</small>
                                            <% } %>
                                        </div>
                                    <% }); %>
                                </div>
                            </div>
                        <% } %>

                        <div class="option-group">
                            <label class="option-label">Quantity:</label>
                            <div class="quantity-selector">
                                <div class="quantity-controls">
                                    <button class="quantity-btn" onclick="changeQuantity(-1)">-</button>
                                    <input type="number" class="quantity-input" value="1" min="1" max="10" id="quantityInput">
                                    <button class="quantity-btn" onclick="changeQuantity(1)">+</button>
                                </div>
                                <span id="stockInfo" class="stock-info"></span>
                            </div>
                        </div>
                    </div>

                    <div class="product-actions">
                        <% if (product.status !== 'Available') { %>
                            <button class="btn btn-primary" id="addToCartBtn" disabled style="background-color: #ccc; cursor: not-allowed;">
                                <i class="fas fa-ban"></i>
                                Out of Stock
                            </button>
                        <% } else { %>
                            <button class="btn btn-primary" id="addToCartBtn" onclick="addToCart()">
                                <i class="fas fa-shopping-cart"></i>
                                Add to Cart
                            </button>
                        <% } %>
                        <button class="btn btn-secondary" onclick="addToWishlist()">
                            <% if (wishlistItems && wishlistItems.some(item => item._id.toString() === product._id.toString())) { %>
                                <i class="fas fa-heart" style="color: #ff4757;"></i>
                                In Wishlist
                            <% } else { %>
                                <i class="far fa-heart"></i>
                                Add to Wishlist
                            <% } %>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Related Products -->
            <% if (relatedProducts && relatedProducts.length > 0) { %>
                <div class="related-products">
                    <h2 class="section-title">Related Products</h2>
                    <div class="products-grid">
                        <% relatedProducts.forEach(relatedProduct => { %>
                            <div class="product-card" onclick="window.location.href='/product/<%= relatedProduct._id %>'">
                                <div class="product-card-image-container">
                                    <% if (relatedProduct.images && relatedProduct.images.length > 0) { %>
                                        <img src="<%= relatedProduct.images[0] %>" alt="<%= relatedProduct.productName %>" class="product-card-image">
                                    <% } else { %>
                                        <img src="https://via.placeholder.com/250x200/ffffff/cccccc?text=Shoe" alt="<%= relatedProduct.productName %>" class="product-card-image">
                                    <% } %>

                                    <!-- Offer Ribbon for Related Products -->
                                    <% if (relatedProduct.bestOffer && relatedProduct.bestOffer > 0) { %>
                                        <div class="related-offer-ribbon">
                                            <span><%= relatedProduct.bestOffer %>% OFF</span>
                                        </div>
                                    <% } %>

                                    <!-- Status Badge for Related Products -->
                                    <% if (relatedProduct.status === 'Available') { %>
                                        <div class="related-status-badge available">
                                            <i class="fas fa-check-circle"></i>
                                        </div>
                                    <% } else { %>
                                        <div class="related-status-badge out-of-stock">
                                            <i class="fas fa-times-circle"></i>
                                        </div>
                                    <% } %>

                                    <!-- Wishlist Icon for Related Products -->
                                    <div class="related-wishlist-icon" onclick="addToWishlist()">
                                        <i class="far fa-heart"></i>
                                    </div>
                                </div>

                                <div class="product-card-info">
                                    <h3 class="product-card-title"><%= relatedProduct.productName %></h3>
                                    <% if (relatedProduct.variants && relatedProduct.variants.length > 0) { %>
                                        <%
                                            const prices = relatedProduct.variants.map(v => v.salePrice);
                                            const originalPrices = relatedProduct.variants.map(v => v.variantPrice);
                                            const minPrice = Math.min(...prices);
                                            const minOriginalPrice = Math.min(...originalPrices);
                                            const hasDiscount = minPrice < minOriginalPrice;
                                        %>
                                        <div class="related-price-container">
                                            <span class="related-current-price">₹<%= minPrice %></span>
                                            <% if (hasDiscount) { %>
                                                <span class="related-original-price">₹<%= minOriginalPrice %></span>
                                            <% } %>
                                        </div>
                                    <% } %>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                </div>
            <% } %>
        </div>
    </main>
    <%- include("../partials/user/userfooter") %>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jquery-zoom/jquery.zoom.min.js"></script>

    <script>
        $(function () {
            const imageContainer = $('#imageZoomContainer');
            const mainImage = $('#mainImage');

            // Function to bind zoom
            function initZoom() {
                imageContainer.trigger('zoom.destroy'); 
                imageContainer.zoom({ magnify: 2.5 });  
            }

            // Initialize on first load
            initZoom();

            // Thumbnail click handler
            $('.thumbnail').on('click', function () {
                const newSrc = $(this).data('image');
                mainImage.attr('src', newSrc); 

               
                setTimeout(() => {
                    initZoom();
                }, 100);
            });
        });
    </script>

    <script>
        let selectedSize = null;
        let selectedPrice = 0;
        let selectedOriginalPrice = 0;
        let availableStock = 0;

        // Warning toast for limit reached
        function warnToast(message) {
            Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'warning',
                title: message,
                showConfirmButton: false,
                timer: 1500,
                timerProgressBar: true
            });
        }

        function changeMainImage(imageSrc, thumbnail) {
            document.getElementById('mainImage').src = imageSrc;

            // Update zoom image as well
            const zoomImage = document.getElementById('zoomImage');
            if (zoomImage) {
                zoomImage.src = imageSrc;
            }

            // Update active thumbnail
            document.querySelectorAll('.thumbnail').forEach(thumb => thumb.classList.remove('active'));
            thumbnail.classList.add('active');
        }

        function selectSize(sizeElement) {
            if (sizeElement.classList.contains('disabled')) return;
            
            // Remove previous selection
            document.querySelectorAll('.size-option').forEach(option => option.classList.remove('selected'));
            
            // Select current size
            sizeElement.classList.add('selected');
            
            // Update selected size data
            selectedSize = sizeElement.dataset.size;
            selectedPrice = parseFloat(sizeElement.dataset.price);
            selectedOriginalPrice = parseFloat(sizeElement.dataset.originalPrice);
            availableStock = parseInt(sizeElement.dataset.quantity);
            
            // Update price display
            updatePriceDisplay();
            
            // Update stock info
            updateStockInfo();
            
            // Update quantity input max
            const quantityInput = document.getElementById('quantityInput');
            quantityInput.max = Math.min(availableStock, 5);
            if (parseInt(quantityInput.value) > availableStock) {
                quantityInput.value = availableStock;
            }
            // Enforce global cap of 5 even if stock is higher
            if (parseInt(quantityInput.value) > 5) {
                quantityInput.value = 5;
            }
        }

        function updatePriceDisplay() {
            const unitPriceElement = document.getElementById('unitPrice');

            if (selectedSize) {
                // Update unit price with rupees sign - show only one price
                unitPriceElement.textContent = `₹${selectedPrice}`;

                // Update total price based on quantity
                updateTotalPrice();
            }
        }

        function updateTotalPrice() {
            const quantity = parseInt(document.getElementById('quantityInput').value) || 1;
            const unitPriceElement = document.getElementById('unitPrice');

            if (selectedSize && selectedPrice > 0) {
                const totalPrice = selectedPrice * quantity;

                // Update total price display with rupees sign - show only one price
                unitPriceElement.textContent = `₹${totalPrice.toFixed(0)}`;
            }
        }

        function autoSelectDefaultSize() {
            const sizeOptions = document.querySelectorAll('.size-option:not(.disabled)');
            if (sizeOptions.length > 0) {
                // Find the smallest available size (assuming sizes are in order)
                let smallestSize = null;
                let smallestSizeValue = Infinity;
                
                sizeOptions.forEach(option => {
                    const sizeText = option.dataset.size;
                    // Try to parse as number, if not possible use string comparison
                    const sizeValue = parseFloat(sizeText) || sizeText;
                    
                    if (typeof sizeValue === 'number' && sizeValue < smallestSizeValue) {
                        smallestSizeValue = sizeValue;
                        smallestSize = option;
                    } else if (typeof sizeValue === 'string' && !smallestSize) {
                        smallestSize = option; // Fallback to first available size
                    }
                });
                
                // If no numeric size found, select the first available size
                if (!smallestSize) {
                    smallestSize = sizeOptions[0];
                }
                
                // Auto-select the smallest/default size
                if (smallestSize) {
                    selectSize(smallestSize);
                }
            }
        }

        function updateStockInfo() {
            const stockInfo = document.getElementById('stockInfo');
            if (selectedSize) {
                if (availableStock > 0) {
                    stockInfo.textContent = `${availableStock} in stock`;
                    stockInfo.style.color = '#28a745';
                } else {
                    stockInfo.textContent = 'Out of stock';
                    stockInfo.style.color = '#dc3545';
                }
            } else {
                stockInfo.textContent = 'Please select a size';
                stockInfo.style.color = '#6c757d';
            }
        }

        function changeQuantity(change) {
            const quantityInput = document.getElementById('quantityInput');
            const currentValue = parseInt(quantityInput.value) || 1;
            let newValue = currentValue + change;

            if (newValue < 1) newValue = 1;

            // Global maximum: 5
            if (change > 0 && currentValue >= 5) {
                warnToast('Limit is reached');
                return;
            }
            if (newValue > 5) {
                newValue = 5;
                warnToast('Limit is reached');
            }

            if (selectedSize) {
                if (change > 0 && currentValue >= availableStock) {
                    // Already at max stock, block increment and show toast
                    warnToast('Limit is reached');
                    return;
                }
                if (newValue > availableStock) {
                    newValue = availableStock;
                    warnToast('Limit is reached');
                }
            } else {
                // Without size, still maintain the 5 cap
                if (newValue > 5) newValue = 5;
            }

            quantityInput.value = newValue;

            // Update total price when quantity changes
            if (selectedSize) {
                updateTotalPrice();
            }
        }

        async function addToCart() {
            try {
                // Check if product is out of stock
                const productStatus = '<%= product.status %>';
                if (productStatus === 'out of stock') {
                    Swal.fire({
                        toast: true,
                        position: 'top-end',
                        icon: 'error',
                        title: 'This product is currently out of stock',
                        showConfirmButton: false,
                        timer: 2000,
                        timerProgressBar: true
                    });
                    return;
                }

                if (!selectedSize) {
                    Swal.fire({
                        toast: true,
                        position: 'top-end',
                        icon: 'warning',
                        title: 'Please select a size first',
                        showConfirmButton: false,
                        timer: 2000,
                        timerProgressBar: true
                    });
                    return;
                }

                if (availableStock <= 0) {
                    Swal.fire({
                        toast: true,
                        position: 'top-end',
                        icon: 'error',
                        title: 'This size is out of stock',
                        showConfirmButton: false,
                        timer: 2000,
                        timerProgressBar: true
                    });
                    return;
                }
                
                // Clamp quantity to min(stock, 5)
                const qtyInputEl = document.getElementById('quantityInput');
                let quantity = parseInt(qtyInputEl.value) || 1;
                const maxAllowed = selectedSize ? Math.min(availableStock, 5) : 5;
                if (quantity > maxAllowed) {
                    quantity = maxAllowed;
                    qtyInputEl.value = maxAllowed;
                    warnToast('Limit is reached');
                }
                
                // Send data to backend
                const response = await fetch('/cart/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({
                        productId: '<%= product._id %>',
                        size: selectedSize,
                        price: selectedPrice,
                        quantity: quantity
                    })
                });

                const data = await response.json();

                if (data.success) {
                    // Update navbar cart count using server response
                    const cartCountElem = document.getElementById('cartCount');
                    if (cartCountElem && data.totalQuantity) {
                        cartCountElem.textContent = data.cartCount;
                    }

                    // Show success message
                    Swal.fire({
                        toast: true,
                        position: 'top-end',
                        icon: 'success',
                        title: `Added ${quantity} x <%= product.productName %> (Size: ${selectedSize}) to cart!`,
                        showConfirmButton: false,
                        timer: 2000,
                        timerProgressBar: true
                    });

                } else {
                    Swal.fire({
                        toast: true,
                        position: 'top-end',
                        icon: 'error',
                        title: data.message || 'Error adding product to cart',
                        showConfirmButton: false,
                        timer: 2000,
                        timerProgressBar: true
                    });
                }
            } catch (error) {
                console.error('Error adding to cart:', error);
                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    icon: 'error',
                    title: 'Error adding product to cart. Please try again.',
                    showConfirmButton: false,
                    timer: 2000,
                    timerProgressBar: true
                });
            }
        }

        async function addToWishlist() {
            const productId = '<%= product._id %>';
            const wishlistBtn = document.querySelector('.btn-secondary');
            const heartIcon = wishlistBtn.querySelector('i');
            const isInWishlist = heartIcon.classList.contains('fas');

            try {
                const response = await fetch('/wishlist/toggle', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ productId: productId })
                });

                const data = await response.json();

                if (data.success) {
                    if (data.action === 'added') {
                        // Product was added to wishlist
                        heartIcon.classList.remove('far');
                        heartIcon.classList.add('fas');
                        heartIcon.style.color = '#ff4757';
                        wishlistBtn.innerHTML = '<i class="fas fa-heart" style="color: #ff4757;"></i> In Wishlist';
                        updateWishlistCount(1);
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'success',
                            title: 'Added to wishlist successfully!',
                            showConfirmButton: false,
                            timer: 1500,
                            timerProgressBar: true
                        });
                    } else if (data.action === 'removed') {
                        // Product was removed from wishlist
                        heartIcon.classList.remove('fas');
                        heartIcon.classList.add('far');
                        heartIcon.style.color = '';
                        wishlistBtn.innerHTML = '<i class="far fa-heart"></i> Add to Wishlist';
                        updateWishlistCount(-1);
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'success',
                            title: 'Removed from wishlist!',
                            showConfirmButton: false,
                            timer: 1500,
                            timerProgressBar: true
                        });
                    }
                } else {
                    Swal.fire({
                        toast: true,
                        position: 'top-end',
                        icon: 'error',
                        title: data.message || 'Error updating wishlist',
                        showConfirmButton: false,
                        timer: 2000,
                        timerProgressBar: true
                    });
                }
            } catch (error) {
                console.error('Error toggling wishlist:', error);
                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    icon: 'error',
                    title: 'Error updating wishlist. Please try again.',
                    showConfirmButton: false,
                    timer: 2000,
                    timerProgressBar: true
                });
            }
        }

        // View cart - Navigate to cart page
        function viewCart() {
            window.location.href = '/cart';
        }

        // Update wishlist count in navbar
        function updateWishlistCount(change) {
            const wishlistCountElem = document.getElementById('wishlistCount');
            if (wishlistCountElem) {
                const currentCount = parseInt(wishlistCountElem.textContent) || 0;
                const newCount = Math.max(0, currentCount + change);
                wishlistCountElem.textContent = newCount;
            }
        }

        
        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            // Auto-select the smallest/default size when page loads
            autoSelectDefaultSize();
            
            // Update stock info
            updateStockInfo();
            
            // Add event listener for manual quantity input changes
            const quantityInput = document.getElementById('quantityInput');
            quantityInput.addEventListener('input', function() {
                let value = parseInt(this.value);
                
                // Validate input
                if (isNaN(value) || value < 1) {
                    value = 1;
                    this.value = 1;
                }

                // Global cap: 5
                if (value > 5) {
                    value = 5;
                    this.value = 5;
                    warnToast('Limit is reached');
                }
                
                if (selectedSize && value > availableStock) {
                    value = availableStock;
                    this.value = availableStock;
                    warnToast('Limit is reached');
                }
                
                // Even without size selected, cap at 5
                if (!selectedSize && value > 5) {
                    value = 5;
                    this.value = 5;
                }
                
                // Update total price when quantity changes manually
                if (selectedSize) {
                    updateTotalPrice();
                }
            });
            initializeImageZoom();
          
        });

        // Image Zoom Functionality
        function initializeImageZoom() {
            const zoomContainer = document.getElementById('imageZoomContainer');
            const mainImage = document.getElementById('mainImage');
            const zoomLens = document.getElementById('zoomLens');
            const zoomResult = document.getElementById('zoomResult');
            const zoomImage = document.getElementById('zoomImage');

            if (!zoomContainer || !mainImage || !zoomLens || !zoomResult || !zoomImage) {
                // Fallback to simple zoom
                if (zoomContainer && mainImage) {
                    zoomContainer.addEventListener('mouseenter', function() {
                        mainImage.style.transform = 'scale(1.2)';
                        mainImage.style.transition = 'transform 0.3s ease';
                    });
                    zoomContainer.addEventListener('mouseleave', function() {
                        mainImage.style.transform = 'scale(1)';
                    });
                }
                return;
            }

            let isZooming = false;

            function showZoom() {
                isZooming = true;
                zoomLens.style.display = 'block';
                zoomResult.style.display = 'block';
                zoomLens.style.opacity = '1';
                zoomResult.style.opacity = '1';
            }

            function hideZoom() {
                isZooming = false;
                zoomLens.style.opacity = '0';
                zoomResult.style.opacity = '0';
                setTimeout(() => {
                    if (!isZooming) {
                        zoomLens.style.display = 'none';
                        zoomResult.style.display = 'none';
                    }
                }, 300);
            
            }

            function updateZoom(e) {
                if (!isZooming) return;

                const rect = zoomContainer.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;

                // Calculate lens position
                const lensWidth = 150; // Fixed lens size
                const lensHeight = 150;
                const lensX = x - (lensWidth / 2);
                const lensY = y - (lensHeight / 2);

                // Constrain lens within image bounds
                const maxLensX = rect.width - lensWidth;
                const maxLensY = rect.height - lensHeight;

                const constrainedLensX = Math.max(0, Math.min(lensX, maxLensX));
                const constrainedLensY = Math.max(0, Math.min(lensY, maxLensY));

                // Position the lens
                zoomLens.style.left = constrainedLensX + 'px';
                zoomLens.style.top = constrainedLensY + 'px';

                // Calculate zoom image position (2x zoom)
                const zoomRatio = 2;
                const zoomX = -(constrainedLensX * zoomRatio);
                const zoomY = -(constrainedLensY * zoomRatio);

                // Position the zoomed image
                zoomImage.style.left = zoomX + 'px';
                zoomImage.style.top = zoomY + 'px';
            }

            // Event listeners
            zoomContainer.addEventListener('mouseenter', function(e) {
                showZoom();
            });

            zoomContainer.addEventListener('mouseleave', function(e) {
                hideZoom();
            });

            zoomContainer.addEventListener('mousemove', function(e) {
                updateZoom(e);
            });

            // Initial setup
            zoomLens.style.display = 'none';
            zoomResult.style.display = 'none';
        }
    </script>
</body>
</html>
