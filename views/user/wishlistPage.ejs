<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Wishlist</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <link rel="stylesheet" href="/css/wishlistPage.css">
    <link rel="stylesheet" href="/css/breadcrumbs.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>
    <%- include("../partials/user/navbar") %>

    <!-- Main Layout Container -->
    <div class="page-container">
        <!-- Main Layout with Sidebar -->
        <div class="page-layout">
            <!-- Sidebar -->
            <aside class="sidebar">
                <%- include("../partials/user/profileSidebar") %>
            </aside>

            <!-- Main Content -->
            <main class="main-content">
                <div class="container">
                    <div class="page-header">
                        <div class="header-icon">
                            <span class="material-icons">favorite</span>
                        </div>
                        <div class="header-text">
                            <h1>My Wishlist</h1>
                            <p>Items you've saved for later</p>
                        </div>
                    </div>

                    <div class="wishlist-section">
                        <div class="section-header">
                            <div class="section-title">
                                <h2>Saved Items</h2>
                                <p><span id="item-count"><%=wishlist.length%></span> items in your wishlist</p>
                            </div>
                            <% if (wishlist.length > 0) { %>
                                <button class="btn btn-danger clear-all-btn" onclick="clearWishlist()">
                                    <span class="material-icons">delete</span>
                                    Empty Wishlist
                                </button>
                            <% } %>
                        </div>

                        <% if (wishlist.length > 0) { %>
                            <div class="wishlist-grid" id="wishlistGrid">
                                <% for(let product of wishlist) { %>
                                    <div class="product-card" data-product-id="<%= product._id %>">
                                        <% 
                                            const totalStock = product.variants.reduce((sum, variant) => sum + variant.variantQuantity, 0);
                                        %>
                                        <div class="product-image">
                                            <img src="<%= product.images && product.images.length > 0 ? product.images[0] : 'https://via.placeholder.com/200x200/f8f9fa/dee2e6?text=No+Image' %>" alt="<%= product.productName %>">
                                            <% if (totalStock > 0) { %>
                                                <div class="stock-badge in-stock">Available</div>
                                            <% } else { %>
                                                <div class="stock-badge out-of-stock">Out of Stock</div>
                                            <% } %>
                                            <button class="remove-btn" onclick="removeFromWishlist('<%= product._id %>')">
                                                <span class="material-icons">close</span>
                                            </button>
                                        </div>
                                        <div class="product-info">
                                            <h3 class="product-title"><%= product.productName %></h3>
                                            <div class="price-section">
                                                <% if (product.variants && product.variants.length > 0) { %>
                                                    <% 
                                                        const sortedVariants = product.variants.sort((a, b) => {
                                                            const aNum = parseFloat(a.size);
                                                            const bNum = parseFloat(b.size);
                                                            if (!isNaN(aNum) && !isNaN(bNum)) {
                                                                return aNum - bNum;
                                                            }
                                                            return a.size.localeCompare(b.size);
                                                        });
                                                        const firstVariant = sortedVariants[0];
                                                        const minPrice = Math.min(...product.variants.map(v => v.salePrice));
                                                    %>
                                                    <span class="current-price">â‚¹<%= minPrice %></span>
                                                    <div class="size-selector">
                                                        <label>Select Size:</label>
                                                        <select class="size-select" data-product-id="<%= product._id %>" onchange="updateWishlistPrice(this)">
                                                            <option value="">Choose a size</option>
                                                            <% sortedVariants.forEach(variant => { %>
                                                                <% if (variant.variantQuantity > 0) { %>
                                                                    <option value="<%= variant.size %>" data-price="<%= variant.salePrice %>"><%= variant.size %></option>
                                                                <% } %>
                                                            <% }); %>
                                                        </select>
                                                    </div>
                                                <% } else { %>
                                                    <span class="current-price">Price not available</span>
                                                <% } %>
                                            </div>
                                            <div class="product-actions">
                                                <button class="add-to-cart-btn" onclick="addToCartFromWishlist('<%= product._id %>')">
                                                    <span class="material-icons">shopping_cart</span>
                                                    Add to Cart
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                <% } %>
                            </div>
                        <% } else { %>
                            <div class="empty-state" id="emptyState">
                                <div class="empty-icon">
                                    <span class="material-icons">favorite_border</span>
                                </div>
                                <h3>Your wishlist is empty</h3>
                                <p>Start adding items you love to see them here!</p>
                                <button class="btn btn-large btn-primary" onclick="window.location.href='/shop'">Continue Shopping</button>
                            </div>
                        <% } %>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <%- include("../partials/user/userfooter") %>

    

    <script>
        let cartCount = 0;
        let currentModalProductId = null;

        function addToCart(productId) {
            cartCount++;
            document.querySelector('.cart-count').textContent = cartCount;
            showToast(`Added ${productData[productId].title} to cart!`);
        }

        async function addToCartFromWishlist(productId) {
            try {
                const productCard = document.querySelector(`[data-product-id="${productId}"]`);
                const sizeSelect = productCard.querySelector('.size-select');
                const selectedSize = sizeSelect.value;

                if (!selectedSize) {
                    Swal.fire({
                        title: 'Size Required!',
                        text: 'Please select a size before adding to cart.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                    return;
                }

                const addToCartBtn = productCard.querySelector('.add-to-cart-btn');
                const originalText = addToCartBtn.innerHTML;
                addToCartBtn.innerHTML = '<span class="material-icons">hourglass_empty</span> Adding...';
                addToCartBtn.disabled = true;

                const response = await fetch('/wishlist/add-to-cart', {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({ 
                        productId: productId,
                        size: selectedSize
                    })
                });

                const data = await response.json();

                if (data.success) {
                    productCard.style.animation = 'slideOut 0.3s ease-in';
                    
                    setTimeout(() => {
                        productCard.remove();
                        updateItemCount();
                        
                        const wishlistCountElem = document.getElementById('wishlistCount');
                        if (wishlistCountElem) {
                            const currentWishlistCount = parseInt(wishlistCountElem.textContent) || 0;
                            const newWishlistCount = Math.max(0, currentWishlistCount - 1);
                            wishlistCountElem.textContent = newWishlistCount;
                        }

                        const cartCountElem = document.getElementById('cartCount');
                        if (cartCountElem) {
                            cartCountElem.textContent = data.cartCount;
                        }
                        
                        const remainingCards = document.querySelectorAll('.product-card');
                        if (remainingCards.length === 0) {
                            document.getElementById('wishlistGrid').innerHTML = `
                                <div class="empty-state" id="emptyState">
                                    <div class="empty-icon">
                                        <span class="material-icons">favorite_border</span>
                                    </div>
                                    <h3>Your wishlist is empty</h3>
                                    <p>Start adding items you love to see them here!</p>
                                    <button class="btn btn-large btn-primary" onclick="window.location.href='/shop'">Continue Shopping</button>
                                </div>
                            `;
                        }
                        
                        Swal.fire({
                            title: 'Added to Cart!',
                            text: 'Product has been moved to your cart successfully.',
                            icon: 'success',
                            timer: 2000,
                            showConfirmButton: false
                        });
                    }, 300);
                } else {
                    addToCartBtn.innerHTML = originalText;
                    addToCartBtn.disabled = false;
                    
                    if (data.isOutOfStock || data.message === 'Out of Stock') {
                        Swal.fire({
                            title: 'Out of Stock!',
                            text: 'Sorry, this product is currently out of stock.',
                            icon: 'warning',
                            confirmButtonText: 'OK',
                            confirmButtonColor: '#ff6b6b'
                        });
                    } else {
                        Swal.fire({
                            title: 'Error!',
                            text: data.message || 'Error adding product to cart',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                }
            } catch (error) {
                console.error('Error adding to cart from wishlist:', error);
                
                const productCard = document.querySelector(`[data-product-id="${productId}"]`);
                const addToCartBtn = productCard.querySelector('.add-to-cart-btn');
                addToCartBtn.innerHTML = '<span class="material-icons">shopping_cart</span> Add to Cart';
                addToCartBtn.disabled = false;
                
                Swal.fire({
                    title: 'Error!',
                    text: 'Error adding product to cart. Please try again.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        }

        async function removeFromWishlist(productId) {
            const result = await Swal.fire({
                title: 'Remove from Wishlist?',
                text: 'Are you sure you want to remove this item from your wishlist?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, remove it!',
                cancelButtonText: 'Cancel'
            });

            if (result.isConfirmed) {
                try {
                    const response = await fetch('/wishlist/remove', {
                        method: 'PATCH',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: JSON.stringify({ productId: productId })
                    });

                    const data = await response.json();

                    if (data.success) {
                        const productCard = document.querySelector(`[data-product-id="${productId}"]`);
                        if (productCard) {
                            productCard.style.animation = 'slideOut 0.3s ease-in';
                            
                            setTimeout(() => {
                                productCard.remove();
                                updateItemCount();
                                
                                const wishlistCountElem = document.getElementById('wishlistCount');
                                if (wishlistCountElem) {
                                    const currentCount = parseInt(wishlistCountElem.textContent) || 0;
                                    const newCount = Math.max(0, currentCount - 1);
                                    wishlistCountElem.textContent = newCount;
                                }
                                
                                const remainingCards = document.querySelectorAll('.product-card');
                                if (remainingCards.length === 0) {
                                    document.querySelector('.wishlist-section').innerHTML = `
                                        <div class="empty-state" id="emptyState">
                                            <div class="empty-icon">
                                                <span class="material-icons">favorite_border</span>
                                            </div>
                                            <h3>Your wishlist is empty</h3>
                                            <p>Start adding items you love to see them here!</p>
                                            <button class="btn btn-large btn-primary" onclick="window.location.href='/shop'">Continue Shopping</button>
                                        </div>
                                    `;
                                }
                                
                                Swal.fire({
                                    title: 'Removed!',
                                    text: 'Item has been removed from your wishlist.',
                                    icon: 'success',
                                    timer: 2000,
                                    showConfirmButton: false
                                });
                            }, 300);
                        }
                    } else {
                        Swal.fire({
                            title: 'Error!',
                            text: data.message || 'Error removing item from wishlist',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                } catch (error) {
                    console.error('Error removing from wishlist:', error);
                    Swal.fire({
                        title: 'Error!',
                        text: 'Error removing item from wishlist. Please try again.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }
            }
        }

        async function clearWishlist() {
            Swal.fire({
                title: 'Are you sure?',
                text: 'Do you really want to clear your entire wishlist?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, clear it!',
                cancelButtonText: 'Cancel'
            }).then(async (result) => {
                if (result.isConfirmed) {
                    try {
                        const response = await fetch('/wishlist/clear', {
                            method: 'PATCH',
                            headers: {
                                'Content-Type': 'application/json',
                                'Accept': 'application/json',
                                'X-Requested-With': 'XMLHttpRequest'
                            }
                        });

                        const data = await response.json();

                        if (data.success) {
                            const productCards = document.querySelectorAll('.product-card');
                            productCards.forEach((card, index) => {
                                setTimeout(() => {
                                    card.style.animation = 'slideOut 0.3s ease-in';
                                    setTimeout(() => card.remove(), 300);
                                }, index * 100);
                            });

                            setTimeout(() => {
                                updateItemCount();

                                const wishlistCountElem = document.getElementById('wishlistCount');
                                if (wishlistCountElem) {
                                    wishlistCountElem.textContent = '0';
                                }

                                document.querySelector('.wishlist-section').innerHTML = `
                                    <div class="empty-state" id="emptyState">
                                        <div class="empty-icon">
                                            <span class="material-icons">favorite_border</span>
                                        </div>
                                        <h3>Your wishlist is empty</h3>
                                        <p>Start adding items you love to see them here!</p>
                                        <button class="btn btn-large btn-primary" onclick="window.location.href='/shop'">Continue Shopping</button>
                                    </div>
                                `;

                                showToast('Wishlist cleared successfully');
                            }, productCards.length * 100 + 300);
                        } else {
                            showToast(data.message || 'Error clearing wishlist');
                        }
                    } catch (error) {
                        console.error('Error clearing wishlist:', error);
                        showToast('Error clearing wishlist. Please try again.');
                    }
                }
            });
        }

        function updateItemCount() {
            const count = document.querySelectorAll('.product-card').length;
            document.getElementById('item-count').textContent = count;
        }

        function showToast(message) {
            const toast = document.getElementById('toast');
            const toastMessage = document.getElementById('toastMessage');
            
            toastMessage.textContent = message;
            toast.classList.add('show');
            
            setTimeout(() => {
                toast.classList.remove('show');
            }, 3000);
        }

        function updateWishlistPrice(selectElement) {
            try {
                const productId = selectElement.getAttribute('data-product-id');
                const selectedSize = selectElement.value;

                const selectedOption = selectElement.options[selectElement.selectedIndex];
                if (selectedOption && selectedOption.dataset.price) {
                    const price = selectedOption.dataset.price;
                    const priceElement = selectElement.closest('.product-card').querySelector('.current-price');
                    if (priceElement) {
                        priceElement.textContent = `â‚¹${price}`;
                    }
                }
            } catch (error) {
                console.error('Error updating wishlist price:', error);
            }
        }
    </script>
</body>
</html>
