<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Wishlist</title>
    <link rel="stylesheet" href="/css/wishlistPage.css">
    
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">

<style>
    .quick-view-btn {
            background: #ffffff;
            color: #1a1a1a;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-weight: 600;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

</style>

</head>
<body>
    <!-- Navigation Bar -->
   <%-include("../partials/user/navbar")%>

    <!-- Header with Breadcrumbs -->
    <header class="header">
        <div class="container">
            <div class="breadcrumbs">
                <a href="#" class="breadcrumb-item">
                    <i class="fas fa-home"></i> Home
                </a>
                <span class="breadcrumb-separator">/</span>
                <a href="#" class="breadcrumb-item">Account</a>
                <span class="breadcrumb-separator">/</span>
                <span class="breadcrumb-item active">
                    <i class="fas fa-heart"></i> Wishlist
                </span>
            </div>
            <h1><i class="fas fa-heart"></i> My Wishlist</h1>
            <p class="header-subtitle">Save your favorite items for later</p>
        </div>
    </header>

    <main class="main">
        <div class="container">
            <div class="wishlist-stats">
                <p><span id="item-count"><%=wishlist.length%></span> items in your wishlist</p>
                <button class="clear-all-btn" onclick="clearWishlist()">
                    <i class="fas fa-trash"></i> Clear All
                </button>
            </div>

            <div class="wishlist-grid" id="wishlistGrid">
                <% if(wishlist.length > 0) { %>
                    <% for(let product of wishlist) { %>
                        <div class="product-card" data-product-id="<%= product._id %>">
                            <div class="product-image">
                                <img src="<%= product.images && product.images.length > 0 ? product.images[0] : 'https://via.placeholder.com/300x300/f8f9fa/dee2e6?text=No+Image' %>" alt="<%= product.productName %>">
                                <button class="remove-btn" onclick="removeFromWishlist('<%= product._id %>')">
                                    <i class="fas fa-times"></i>
                                </button>
                                 <div class="product-overlay">
                                    <button class="quick-view-btn"
                                        data-id="<%= product._id %>"
                                        onclick="event.stopPropagation(); quickView('<%= product._id %>')">
                                        <i class="fas fa-eye"></i> Quick View
                                    </button>
                                </div>
                            </div>
                            <div class="product-info">
                                <h3 class="product-title"><%= product.productName %></h3>
                                <div class="price-section">
                                    <% if (product.variants && product.variants.length > 0) { %>
                                        <% 
                                            const sortedVariants = product.variants.sort((a, b) => {
                                                const aNum = parseFloat(a.size);
                                                const bNum = parseFloat(b.size);
                                                if (!isNaN(aNum) && !isNaN(bNum)) {
                                                    return aNum - bNum;
                                                }
                                                return a.size.localeCompare(b.size);
                                            });
                                            const firstVariant = sortedVariants[0];
                                            const minPrice = Math.min(...product.variants.map(v => v.salePrice));
                                            const maxPrice = Math.max(...product.variants.map(v => v.variantPrice));
                                        %>
                                        <span class="current-price">₹<%= minPrice %></span>
                                        <% if (maxPrice > minPrice) { %>
                                            <span class="original-price">₹<%= maxPrice %></span>
                                        <% } %>
                                        <% if (product.productOffer && product.productOffer > 0) { %>
                                            <span class="discount"><%= product.productOffer %>% OFF</span>
                                        <% } %>
                                        <div class="size-selector">
                                            <label>Select Size:</label>
                                            <select class="size-select" data-product-id="<%= product._id %>" onchange="updateWishlistPrice(this)">
                                                <option value="">Choose a size</option>
                                                <% sortedVariants.forEach(variant => { %>
                                                    <% if (variant.variantQuantity > 0) { %>
                                                        <option value="<%= variant.size %>" data-price="<%= variant.salePrice %>"><%= variant.size %></option>
                                                    <% } %>
                                                <% }); %>
                                            </select>
                                        </div>
                                    <% } else { %>
                                        <span class="current-price">Price not available</span>
                                    <% } %>
                                </div>
                                <div class="product-actions">
                                    <button class="add-to-cart-btn" onclick="addToCartFromWishlist('<%= product._id %>')">
                                        <i class="fas fa-shopping-cart"></i> Add to Cart
                                    </button>
                                </div>
                            </div>
                        </div>
                    <% } %>
                <% } else { %>
                    <div class="empty-state" id="emptyState">
                        <i class="fas fa-heart"></i>
                        <h3>Your wishlist is empty</h3>
                        <p>Start adding items you love to see them here!</p>
                        <button class="continue-shopping-btn" onclick="window.location.href='/shop'">Continue Shopping</button>
                    </div>
                <% } %>
            </div>
        </div>
    </main>

    <!-- Footer -->
     <%-include("../partials/user/userfooter")%>

    

    <!-- Success Toast -->
    <div class="toast" id="toast">
        <i class="fas fa-check-circle"></i>
        <span id="toastMessage"></span>
    </div>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        let cartCount = 0;
        let currentModalProductId = null;

         function addToCart(productId) {
            cartCount++;
            document.querySelector('.cart-count').textContent = cartCount;
            showToast(`Added ${productData[productId].title} to cart!`);
        }

        async function addToCartFromWishlist(productId) {
            try {
                // Get the product card
                const productCard = document.querySelector(`[data-product-id="${productId}"]`);
                const sizeSelect = productCard.querySelector('.size-select');
                const selectedSize = sizeSelect.value;

                // Check if size is selected
                if (!selectedSize) {
                    Swal.fire({
                        title: 'Size Required!',
                        text: 'Please select a size before adding to cart.',
                        icon: 'warning',
                        confirmButtonText: 'OK'
                    });
                    return;
                }

                // Show loading state
                const addToCartBtn = productCard.querySelector('.add-to-cart-btn');
                const originalText = addToCartBtn.innerHTML;
                addToCartBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Adding...';
                addToCartBtn.disabled = true;

                const response = await fetch('/wishlist/add-to-cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({ 
                        productId: productId,
                        size: selectedSize
                    })
                });

                const data = await response.json();

                if (data.success) {
                    // Animate product card removal
                    productCard.style.animation = 'slideOut 0.3s ease-in';
                    
                    setTimeout(() => {
                        productCard.remove();
                        updateItemCount();
                        
                        // Update navbar counts
                        const wishlistCountElem = document.getElementById('wishlistCount');
                        if (wishlistCountElem) {
                            const currentWishlistCount = parseInt(wishlistCountElem.textContent) || 0;
                            const newWishlistCount = Math.max(0, currentWishlistCount - 1);
                            wishlistCountElem.textContent = newWishlistCount;
                        }

                        const cartCountElem = document.getElementById('cartCount');
                        if (cartCountElem) {
                            cartCountElem.textContent = data.cartCount;
                        }
                        
                        // Check if wishlist is empty and show empty state
                        const remainingCards = document.querySelectorAll('.product-card');
                        if (remainingCards.length === 0) {
                            document.getElementById('wishlistGrid').innerHTML = `
                                <div class="empty-state" id="emptyState">
                                    <i class="fas fa-heart"></i>
                                    <h3>Your wishlist is empty</h3>
                                    <p>Start adding items you love to see them here!</p>
                                    <button class="continue-shopping-btn" onclick="window.location.href='/shop'">Continue Shopping</button>
                                </div>
                            `;
                        }
                        
                        // Show success message
                        Swal.fire({
                            title: 'Added to Cart!',
                            text: 'Product has been moved to your cart successfully.',
                            icon: 'success',
                            timer: 2000,
                            showConfirmButton: false
                        });
                    }, 300);
                } else {
                    // Reset button state
                    addToCartBtn.innerHTML = originalText;
                    addToCartBtn.disabled = false;
                    
                    // Check if it's an out of stock error
                    if (data.isOutOfStock || data.message === 'Out of Stock') {
                        Swal.fire({
                            title: 'Out of Stock!',
                            text: 'Sorry, this product is currently out of stock.',
                            icon: 'warning',
                            confirmButtonText: 'OK',
                            confirmButtonColor: '#ff6b6b'
                        });
                    } else {
                        Swal.fire({
                            title: 'Error!',
                            text: data.message || 'Error adding product to cart',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                }
            } catch (error) {
                console.error('Error adding to cart from wishlist:', error);
                
                // Reset button state
                const productCard = document.querySelector(`[data-product-id="${productId}"]`);
                const addToCartBtn = productCard.querySelector('.add-to-cart-btn');
                addToCartBtn.innerHTML = '<i class="fas fa-shopping-cart"></i> Add to Cart';
                addToCartBtn.disabled = false;
                
                Swal.fire({
                    title: 'Error!',
                    text: 'Error adding product to cart. Please try again.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        }

        async function removeFromWishlist(productId) {
            // Show SweetAlert confirmation dialog
            const result = await Swal.fire({
                title: 'Remove from Wishlist?',
                text: 'Are you sure you want to remove this item from your wishlist?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, remove it!',
                cancelButtonText: 'Cancel'
            });

            if (result.isConfirmed) {
                try {
                    const response = await fetch('/wishlist/remove', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: JSON.stringify({ productId: productId })
                    });

                    const data = await response.json();

                    if (data.success) {
                        const productCard = document.querySelector(`[data-product-id="${productId}"]`);
                        if (productCard) {
                            productCard.style.animation = 'slideOut 0.3s ease-in';
                            
                            setTimeout(() => {
                                productCard.remove();
                                updateItemCount();
                                
                                // Update navbar wishlist count
                                const wishlistCountElem = document.getElementById('wishlistCount');
                                if (wishlistCountElem) {
                                    const currentCount = parseInt(wishlistCountElem.textContent) || 0;
                                    const newCount = Math.max(0, currentCount - 1);
                                    wishlistCountElem.textContent = newCount;
                                }
                                
                                // Check if wishlist is empty and show empty state
                                const remainingCards = document.querySelectorAll('.product-card');
                                if (remainingCards.length === 0) {
                                    document.getElementById('wishlistGrid').innerHTML = `
                                        <div class="empty-state" id="emptyState">
                                            <i class="fas fa-heart"></i>
                                            <h3>Your wishlist is empty</h3>
                                            <p>Start adding items you love to see them here!</p>
                                            <button class="continue-shopping-btn" onclick="window.location.href='/shop'">Continue Shopping</button>
                                        </div>
                                    `;
                                }
                                
                                // Show success message with SweetAlert
                                Swal.fire({
                                    title: 'Removed!',
                                    text: 'Item has been removed from your wishlist.',
                                    icon: 'success',
                                    timer: 2000,
                                    showConfirmButton: false
                                });
                            }, 300);
                        }
                    } else {
                        Swal.fire({
                            title: 'Error!',
                            text: data.message || 'Error removing item from wishlist',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                } catch (error) {
                    console.error('Error removing from wishlist:', error);
                    Swal.fire({
                        title: 'Error!',
                        text: 'Error removing item from wishlist. Please try again.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }
            }
        }

       

        function quickView(productId) {
            // Navigate to product detail page
            window.location.href = `/product/${productId}`;
        }

      
      

      async function clearWishlist() {
    Swal.fire({
      title: 'Are you sure?',
      text: 'Do you really want to clear your entire wishlist?',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, clear it!',
      cancelButtonText: 'Cancel'
    }).then(async (result) => {
      if (result.isConfirmed) {
        try {
          const response = await fetch('/wishlist/clear', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json',
              'X-Requested-With': 'XMLHttpRequest'
            }
          });

          const data = await response.json();

          if (data.success) {
            const productCards = document.querySelectorAll('.product-card');
            productCards.forEach((card, index) => {
              setTimeout(() => {
                card.style.animation = 'slideOut 0.3s ease-in';
                setTimeout(() => card.remove(), 300);
              }, index * 100);
            });

            setTimeout(() => {
              updateItemCount();

              // Update navbar wishlist count to 0
              const wishlistCountElem = document.getElementById('wishlistCount');
              if (wishlistCountElem) {
                wishlistCountElem.textContent = '0';
              }

              // Show empty state
              document.getElementById('wishlistGrid').innerHTML = `
                <div class="empty-state" id="emptyState">
                  <i class="fas fa-heart"></i>
                  <h3>Your wishlist is empty</h3>
                  <p>Start adding items you love to see them here!</p>
                  <button class="continue-shopping-btn" onclick="window.location.href='/shop'">Continue Shopping</button>
                </div>
              `;

              showToast('Wishlist cleared successfully');
            }, productCards.length * 100 + 300);
          } else {
            showToast(data.message || 'Error clearing wishlist');
          }
        } catch (error) {
          console.error('Error clearing wishlist:', error);
          showToast('Error clearing wishlist. Please try again.');
        }
      }
    });
  }


        function updateItemCount() {
            const count = document.querySelectorAll('.product-card').length;
            document.getElementById('item-count').textContent = count;
        }

        function generateStars(rating) {
            let starsHTML = '';
            const fullStars = Math.floor(rating);
            const hasHalfStar = rating % 1 !== 0;
            
            for (let i = 0; i < fullStars; i++) {
                starsHTML += '<i class="fas fa-star"></i>';
            }
            
            if (hasHalfStar) {
                starsHTML += '<i class="fas fa-star-half-alt"></i>';
            }
            
            const emptyStars = 5 - Math.ceil(rating);
            for (let i = 0; i < emptyStars; i++) {
                starsHTML += '<i class="far fa-star"></i>';
            }
            
            return starsHTML;
        }

        function showToast(message) {
            const toast = document.getElementById('toast');
            const toastMessage = document.getElementById('toastMessage');
            
            toastMessage.textContent = message;
            toast.classList.add('show');
            
            setTimeout(() => {
                toast.classList.remove('show');
            }, 3000);
        }

        // Close modal when clicking outside
       

        // Mobile Navigation Toggle
        const navToggle = document.getElementById('navToggle');
        const navMenu = document.getElementById('navMenu');

        navToggle.addEventListener('click', function() {
            navMenu.classList.toggle('nav-menu-active');
            navToggle.classList.toggle('nav-toggle-active');
        });

        // Close mobile menu when clicking on a link
        document.querySelectorAll('.nav-link').forEach(link => {
            link.addEventListener('click', () => {
                navMenu.classList.remove('nav-menu-active');
                navToggle.classList.remove('nav-toggle-active');
            });
        });

        // Newsletter subscription
        document.querySelector('.newsletter-btn').addEventListener('click', function() {
            const email = document.querySelector('.newsletter-input').value;
            if (email) {
                showToast('Successfully subscribed to newsletter!');
                document.querySelector('.newsletter-input').value = '';
            } else {
                showToast('Please enter a valid email address');
            }
        });

        // Search functionality
        document.querySelector('.search-input').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                const searchTerm = this.value;
                if (searchTerm) {
                    showToast(`Searching for "${searchTerm}"`);
                    this.value = '';
                }
            }
        });

        function updateWishlistPrice(selectElement) {
            try {
                const productId = selectElement.getAttribute('data-product-id');
                const selectedSize = selectElement.value;


                // For now, just update the price based on the selected option
                const selectedOption = selectElement.options[selectElement.selectedIndex];
                if (selectedOption && selectedOption.dataset.price) {
                    const price = selectedOption.dataset.price;
                    const priceElement = selectElement.closest('.product-card').querySelector('.current-price');
                    if (priceElement) {
                        priceElement.textContent = `₹${price}`;
                    }
                }

            } catch (error) {
                console.error('Error updating wishlist price:', error);
            }
        }

        // Keyboard navigation
        
    </script>
    
</body>
</html>