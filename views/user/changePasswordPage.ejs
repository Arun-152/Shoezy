<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Account Settings</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <link rel="stylesheet" href="/css/changePasswordPage.css">
    <link rel="stylesheet" href="/css/breadcrumbs.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>
    <%- include("../partials/user/navbar") %>

    <!-- Main Layout Container -->
    <div class="page-container">
        <!-- Main Layout with Sidebar -->
        <div class="page-layout">
            <!-- Sidebar -->
            <aside class="sidebar">
                <%- include("../partials/user/profileSidebar") %>
            </aside>

            <!-- Main Content -->
            <main class="main-content">
                <div class="container">
                    <div class="page-header">
                        <div class="header-icon">
                            <span class="material-icons">security</span>
                        </div>
                        <div class="header-text">
                            <h1>Account Settings</h1>
                            <p>Manage your email and password settings</p>
                        </div>
                    </div>

                    <div class="settings-section">
                        <div class="settings-grid">
                            <!-- Email Change Section -->
                            <div class="settings-card">
                                <div class="card-header">
                                    <div class="card-icon">
                                        <span class="material-icons">email</span>
                                    </div>
                                    <div class="card-title">
                                        <h3>Change Email Address</h3>
                                        <p>Update your email address for account notifications</p>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <div class="form-group">
                                        <label for="current-email">Current Email</label>
                                        <input type="email" id="current-email" class="form-input" value="<%= user.email%>" readonly>
                                    </div>
                                    <div class="form-group">
                                        <label for="new-email">New Email Address</label>
                                        <input type="email" id="new-email" class="form-input" placeholder="Enter new email address">
                                        <div id="new-email-error" class="validationError" style="display: none;"></div>
                                    </div>
                                    <div class="card-actions">
                                        <button type="button" class="btn btn-primary" onclick="openEmailModal()">Change Email</button>
                                        <button type="button" class="btn btn-secondary" onclick="window.location.href='/profile'">Cancel</button>
                                    </div>
                                </div>
                            </div>

                            <!-- Password Change Section -->
                            <div class="settings-card">
                                <div class="card-header">
                                    <div class="card-icon">
                                        <span class="material-icons">lock</span>
                                    </div>
                                    <div class="card-title">
                                        <h3>Change Password</h3>
                                        <p>Update your password to keep your account secure</p>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <form id="password-form">
                                        <div class="form-group">
                                            <label for="current-password">Current Password</label>
                                            <input type="password" id="current-password" class="form-input" placeholder="Enter current password">
                                            <div id="current-password-error" class="validationError" style="display: none;"></div>
                                        </div>
                                        <div class="form-group">
                                            <label for="new-password">New Password</label>
                                            <input type="password" id="new-password" class="form-input" placeholder="Enter new password">
                                            <div id="new-password-error" class="validationError" style="display: none;"></div>
                                        </div>
                                        <div class="form-group">
                                            <label for="confirm-password">Confirm New Password</label>
                                            <input type="password" id="confirm-password" class="form-input" placeholder="Confirm new password">
                                            <div id="confirm-password-error" class="validationError" style="display: none;"></div>
                                        </div>
                                        <div id="password-form-error" class="validationError" style="display: none; margin-bottom: 15px;"></div>
                                        <div class="card-actions">
                                            <button type="submit" class="btn btn-primary">Update Password</button>
                                            <button type="button" class="btn btn-secondary" onclick="window.location.href='/profile'">Cancel</button>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <!-- Email Change Modal -->
    <div id="email-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Change Email Address</h3>
                <span class="close" onclick="closeEmailModal()">&times;</span>
            </div>
            <div class="modal-body">
                <!-- Step 1: Enter New Email -->
                <div id="email-step" class="modal-step">
                    <div class="form-group">
                        <label for="modal-new-email">New Email Address</label>
                        <input type="email" id="modal-new-email" class="form-input" placeholder="Enter new email address">
                        <div id="email-error" class="validationError" style="display: none;"></div>
                    </div>
                    <div class="modal-actions">
                        <button type="button" class="btn btn-primary" onclick="sendEmailOTP()">Send OTP</button>
                    </div>
                </div>

                <!-- Step 2: Enter OTP -->
                <div id="otp-step" class="modal-step" style="display: none;">
                    <p>We've sent a verification code to:</p>
                    <p class="email-display" id="modal-email"></p>
                    <div class="form-group">
                        <label for="otp-code">Enter Verification Code</label>
                        <input type="text" id="otp-code" class="form-input" placeholder="Enter 6-digit code" maxlength="6">
                        <div id="otp-error" class="validationError" style="display: none;"></div>
                    </div>
                    <div class="modal-actions">
                        <button type="button" id="resend-btn" class="btn btn-secondary" onclick="resendOTP()" style="display: none;">Resend Code</button>
                        <button type="button" class="btn btn-primary" onclick="verifyOTP()">Verify Email</button>
                    </div>
                    <div id="timer-display" style="margin-top: 10px; text-align: center; color: #666;"></div>
                </div>
            </div>
        </div>
    </div>

    <%- include("../partials/user/userfooter") %>

    <script>
        let otpTimer = null;
        let timeLeft = 0;

        // Clear main email form errors
        function clearMainEmailErrors() {
            document.getElementById('new-email-error').style.display = 'none';
        }

        // Show main email form error
        function showMainEmailError(message) {
            const errorElement = document.getElementById('new-email-error');
            errorElement.textContent = message;
            errorElement.style.display = 'block';
        }

        // Open email modal - directly opens modal without sending OTP
        function openEmailModal() {
            // Clear previous errors
            clearMainEmailErrors();
            
            // Get and validate the new email from main form
            const newEmail = document.getElementById('new-email').value.trim();
            
            // Validation
            if (!newEmail) {
                showMainEmailError('Please enter a new email address');
                return;
            }
            
            if (!isValidEmail(newEmail)) {
                showMainEmailError('Please enter a valid email address');
                return;
            }
            
            // Pre-fill modal email input with the value from main form
            document.getElementById('modal-new-email').value = newEmail;
            
            // Reset modal state
            showEmailStep();
            clearErrors();
            
            // Show modal
            document.getElementById('email-modal').style.display = 'block';
        }

        // Show email input step
        function showEmailStep() {
            document.getElementById('email-step').style.display = 'block';
            document.getElementById('otp-step').style.display = 'none';
        }

        // Show OTP input step
        function showOtpStep() {
            document.getElementById('email-step').style.display = 'none';
            document.getElementById('otp-step').style.display = 'block';
        }

        // Clear all error messages
        function clearErrors() {
            document.getElementById('email-error').style.display = 'none';
            document.getElementById('otp-error').style.display = 'none';
        }

        // Show inline error
        function showError(elementId, message) {
            const errorElement = document.getElementById(elementId);
            errorElement.textContent = message;
            errorElement.style.display = 'block';
        }

        // Email validation helper
        function isValidEmail(email) {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return emailRegex.test(email);
        }

        // Send OTP to new email
        async function sendEmailOTP() {
            const newEmail = document.getElementById('modal-new-email').value.trim();
            
            // Clear previous errors
            clearErrors();
            
            // Validation
            if (!newEmail) {
                showError('email-error', 'Please enter a new email address');
                return;
            }
            
            if (!isValidEmail(newEmail)) {
                showError('email-error', 'Please enter a valid email address');
                return;
            }

            try {
                const response = await fetch('/profile/send-email-otp', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ newEmail: newEmail })
                });

                const data = await response.json();

                if (data.success) {
                    // Show OTP step
                    document.getElementById('modal-email').textContent = newEmail;
                    showOtpStep();
                    
                    // Start timer
                    startOtpTimer(60); // 60 seconds timer
                } else {
                    showError('email-error', data.message || 'Failed to send OTP');
                }
            } catch (error) {
                console.error('Error:', error);
                showError('email-error', 'An error occurred. Please try again.');
            }
        }

        // Start OTP timer
        function startOtpTimer(seconds) {
            timeLeft = seconds;
            document.getElementById('resend-btn').style.display = 'none';
            
            otpTimer = setInterval(() => {
                timeLeft--;
                document.getElementById('timer-display').textContent = `Resend OTP in ${timeLeft}s`;
                
                if (timeLeft <= 0) {
                    clearInterval(otpTimer);
                    document.getElementById('timer-display').textContent = '';
                    document.getElementById('resend-btn').style.display = 'inline-block';
                }
            }, 1000);
        }

        // Resend OTP
        async function resendOTP() {
            clearErrors();
            
            try {
                const response = await fetch('/profile/resend-email-otp', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                const data = await response.json();

                if (data.success) {
                    // Restart timer
                    startOtpTimer(60);
                } else {
                    showError('otp-error', data.message || 'Failed to resend OTP');
                }
            } catch (error) {
                console.error('Error:', error);
                showError('otp-error', 'An error occurred. Please try again.');
            }
        }

        // Verify OTP and update email
        async function verifyOTP() {
            const otpCode = document.getElementById('otp-code').value.trim();
            
            // Clear previous errors
            clearErrors();
            
            // Validation
            if (!otpCode) {
                showError('otp-error', 'Please enter the OTP');
                return;
            }
            
            if (otpCode.length !== 6) {
                showError('otp-error', 'Please enter a valid 6-digit verification code');
                return;
            }

            try {
                const response = await fetch('/profile/verify-email-otp', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ otp: otpCode })
                });

                const data = await response.json();

                if (data.success) {
                    // Success - close modal
                    closeEmailModal();
                    
                    // Show SweetAlert success message and redirect to user account page
                    Swal.fire({
                        title: 'Success!',
                        text: data.message,
                        icon: 'success',
                        confirmButtonText: 'OK',
                        confirmButtonColor: '#28a745'
                    }).then((result) => {
                        // Redirect to user account page
                        window.location.href = '/profile';
                    });
                } else {
                    showError('otp-error', data.message || 'OTP verification failed');
                }
            } catch (error) {
                console.error('Error:', error);
                showError('otp-error', 'An error occurred. Please try again.');
            }
        }

        // Close email modal
        function closeEmailModal() {
            document.getElementById('email-modal').style.display = 'none';
            document.getElementById('modal-new-email').value = '';
            document.getElementById('otp-code').value = '';
            clearErrors();
            
            // Clear timer
            if (otpTimer) {
                clearInterval(otpTimer);
                otpTimer = null;
            }
            
            // Reset to email step
            showEmailStep();
        }

        // Clear password form errors
        function clearPasswordErrors() {
            document.getElementById('current-password-error').style.display = 'none';
            document.getElementById('new-password-error').style.display = 'none';
            document.getElementById('confirm-password-error').style.display = 'none';
            document.getElementById('password-form-error').style.display = 'none';
        }

        // Show password form error
        function showPasswordError(elementId, message) {
            const errorElement = document.getElementById(elementId);
            errorElement.textContent = message;
            errorElement.style.display = 'block';
        }

        // Password Form Handling
        document.getElementById('password-form').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const currentPassword = document.getElementById('current-password').value.trim();
            const newPassword = document.getElementById('new-password').value.trim();
            const confirmPassword = document.getElementById('confirm-password').value.trim();
            
            // Clear previous errors
            clearPasswordErrors();
            
            // Frontend validation
            if (!currentPassword) {
                showPasswordError('current-password-error', 'Current password is required');
                return;
            }
            
            if (!newPassword) {
                showPasswordError('new-password-error', 'New password is required');
                return;
            }
            
            if (!confirmPassword) {
                showPasswordError('confirm-password-error', 'Please confirm your new password');
                return;
            }
            
            if (newPassword.length < 8) {
                showPasswordError('new-password-error', 'New password must be at least 8 characters long');
                return;
            }
            
            if (newPassword !== confirmPassword) {
                showPasswordError('confirm-password-error', 'New password and confirm password do not match');
                return;
            }

            try {
                const response = await fetch('/profile/change-password', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        currentPassword: currentPassword,
                        newPassword: newPassword,
                        confirmPassword: confirmPassword
                    })
                });

                const data = await response.json();

                if (data.success) {
                    // Clear form
                    this.reset();
                    
                    // Show SweetAlert success message and redirect to user account page
                    Swal.fire({
                        title: 'Success!',
                        text: data.message,
                        icon: 'success',
                        confirmButtonText: 'OK',
                        confirmButtonColor: '#28a745'
                    }).then((result) => {
                        // Redirect to user account page
                        window.location.href = '/profile';
                    });
                } else {
                    // Show error message based on the error type
                    if (data.message.includes('Current password is incorrect')) {
                        showPasswordError('current-password-error', data.message);
                    } else if (data.message.includes('New password cannot be the same')) {
                        showPasswordError('new-password-error', data.message);
                    } else if (data.message.includes('do not match')) {
                        showPasswordError('confirm-password-error', data.message);
                    } else {
                        showPasswordError('password-form-error', data.message);
                    }
                }
            } catch (error) {
                console.error('Error:', error);
                showPasswordError('password-form-error', 'An error occurred. Please try again.');
            }
        });

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('email-modal');
            if (event.target === modal) {
                closeEmailModal();
            }
        }

        // Allow Enter key to submit in modal
        document.getElementById('modal-new-email').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendEmailOTP();
            }
        });

        document.getElementById('otp-code').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                verifyOTP();
            }
        });
    </script>
</body>
</html>
