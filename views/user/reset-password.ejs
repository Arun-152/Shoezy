<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Shoezy - Reset Password</title>
  <link rel="stylesheet" href="/css/resetpass.css" />
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <!-- Font Awesome for eye icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <style>
    .password-container {
      position: relative;
    }
    
    .password-toggle {
      position: absolute;
      right: 12px;
      top: 50%;
      transform: translateY(-50%);
      cursor: pointer;
      color: #666;
      font-size: 16px;
      z-index: 1;
    }
    
    .password-toggle:hover {
      color: #333;
    }
    
    /* Adjust input padding to make room for the eye icon */
    .password-container input {
      padding-right: 40px !important;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="left">
      <h1 class="brand">Shoezy</h1>
      <div class="circle"></div>
      <img src="/images/wmnsaijo1hiogutc_photo1.png" alt="Shoe" class="shoe-img" />
    </div>
    <div class="right">
      <h2>Reset Password</h2>
      <p>Enter your new password</p>
      <form id="resetPasswordForm">
        <div class="form-group">
          <label for="password">New Password</label>
          <div class="password-container">
            <input type="password" id="password" name="password" placeholder="Enter new password"  />
            <i class="fas fa-eye-slash password-toggle" id="togglePassword"></i>
          </div>
          <span class="error-message" id="passwordError"></span>
        </div>
        
        <div class="form-group">
          <label for="confirmPassword">Confirm Password</label>
          <div class="password-container">
            <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Confirm new password" />
            <i class="fas fa-eye-slash password-toggle" id="toggleConfirmPassword"></i>
          </div>
          <span class="error-message" id="confirmPasswordError"></span>
        </div>
        
        <button type="submit" class="btn" id="resetBtn">Reset Password</button>
      </form>
      
      <div style="margin-top: 20px; text-align: center;">
        <a href="/login" style="color: #007bff; text-decoration: none;">Back to Login</a>
      </div>
    </div>
  </div>

  <script>
    // Password visibility toggle functionality
    document.getElementById('togglePassword').addEventListener('click', function() {
      const passwordField = document.getElementById('password');
      const toggleIcon = document.getElementById('togglePassword');
      
      if (passwordField.type === 'password') {
        passwordField.type = 'text';
        toggleIcon.classList.remove('fa-eye-slash');
        toggleIcon.classList.add('fa-eye');
      } else {
        passwordField.type = 'password';
        toggleIcon.classList.remove('fa-eye');
        toggleIcon.classList.add('fa-eye-slash');
      }
    });

    document.getElementById('toggleConfirmPassword').addEventListener('click', function() {
      const confirmPasswordField = document.getElementById('confirmPassword');
      const toggleIcon = document.getElementById('toggleConfirmPassword');
      
      if (confirmPasswordField.type === 'password') {
        confirmPasswordField.type = 'text';
        toggleIcon.classList.remove('fa-eye-slash');
        toggleIcon.classList.add('fa-eye');
      } else {
        confirmPasswordField.type = 'password';
        toggleIcon.classList.remove('fa-eye');
        toggleIcon.classList.add('fa-eye-slash');
      }
    });

    // Original form validation and submission code remains unchanged
    document.getElementById('resetPasswordForm').addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const password = document.getElementById('password').value;
      const confirmPassword = document.getElementById('confirmPassword').value;
      const resetBtn = document.getElementById('resetBtn');
      
      // Clear previous errors and reset input styles
      clearErrors();

      // Client-side validation
      let hasError = false;

      if (!password.trim()) {
        showError('passwordError', 'Password field cannot be empty');
        addErrorClass('password');
        hasError = true;
      } else if (password.length < 6) {
        showError('passwordError', 'Password must be at least 6 characters long');
        addErrorClass('password');
        hasError = true;
      } else {
        removeErrorClass('password');
      }

      if (!confirmPassword.trim()) {
        showError('confirmPasswordError', 'Please confirm your password');
        addErrorClass('confirmPassword');
        hasError = true;
      } else if (password !== confirmPassword) {
        showError('confirmPasswordError', 'Passwords do not match');
        addErrorClass('confirmPassword');
        hasError = true;
      } else {
        removeErrorClass('confirmPassword');
      }
      
      if (hasError) return;
      
      // Disable button and show loading
      resetBtn.disabled = true;
      resetBtn.textContent = 'Resetting...';
      
      try {

        const response = await fetch('/reset-password', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ password, confirmPassword })
        });
        
        const data = await response.json();
        
        if (data.success) {
          Swal.fire({
            icon: 'success',
            title: 'Password Reset Successful!',
            text: data.message,
            confirmButtonText: 'Login Now'
          }).then(() => {
            window.location.href = '/login';
          });
        } else {
          // Show server-side validation errors
          if (data.message.includes('match')) {
            showError('confirmPasswordError', 'Passwords do not match');
            addErrorClass('confirmPassword');
          } else if (data.message.includes('required') || data.message.includes('empty')) {
            if (!password.trim()) {
              showError('passwordError', 'Password field cannot be empty');
              addErrorClass('password');
            }
            if (!confirmPassword.trim()) {
              showError('confirmPasswordError', 'Please confirm your password');
              addErrorClass('confirmPassword');
            }
          } else if (data.message.includes('6 characters')) {
            showError('passwordError', 'Password must be at least 6 characters long');
            addErrorClass('password');
          } else {
            // Show generic error in SweetAlert for other server errors
            Swal.fire({
              icon: 'error',
              title: 'Reset Failed',
              text: data.message,
              confirmButtonText: 'Try Again'
            });
          }
        }
      } catch (error) {
        Swal.fire({
          icon: 'error',
          title: 'Network Error',
          text: 'Something went wrong. Please try again.',
          confirmButtonText: 'OK'
        });
      } finally {
        // Re-enable button
        resetBtn.disabled = false;
        resetBtn.textContent = 'Reset Password';
      }
    });

    // Helper functions for error handling (unchanged)
    function showError(elementId, message) {
      const errorElement = document.getElementById(elementId);
      errorElement.textContent = message;
      errorElement.style.display = 'block';
    }

    function clearErrors() {
      document.getElementById('passwordError').textContent = '';
      document.getElementById('confirmPasswordError').textContent = '';
      removeErrorClass('password');
      removeErrorClass('confirmPassword');
    }

    function addErrorClass(inputId) {
      document.getElementById(inputId).classList.add('error');
    }

    function removeErrorClass(inputId) {
      document.getElementById(inputId).classList.remove('error');
    }

    // Real-time validation (unchanged)
    document.getElementById('password').addEventListener('input', function() {
      const password = this.value;

      if (password && password.length < 6) {
        showError('passwordError', 'Password must be at least 6 characters long');
        addErrorClass('password');
      } else if (password.length >= 6) {
        document.getElementById('passwordError').textContent = '';
        removeErrorClass('password');
      } else {
        document.getElementById('passwordError').textContent = '';
        removeErrorClass('password');
      }

      // Check confirm password match if it has value
      const confirmPassword = document.getElementById('confirmPassword').value;

      if (confirmPassword && password !== confirmPassword) {
        showError('confirmPasswordError', 'Passwords do not match');
        addErrorClass('confirmPassword');
      } else if (confirmPassword && password === confirmPassword) {
        document.getElementById('confirmPasswordError').textContent = '';
        removeErrorClass('confirmPassword');
      }
    });

    document.getElementById('confirmPassword').addEventListener('input', function() {
      const confirmPassword = this.value;
      const password = document.getElementById('password').value;

      if (confirmPassword && password !== confirmPassword) {
        showError('confirmPasswordError', 'Passwords do not match');
        addErrorClass('confirmPassword');
      } else if (confirmPassword && password === confirmPassword) {
        document.getElementById('confirmPasswordError').textContent = '';
        removeErrorClass('confirmPassword');
      } else {
        document.getElementById('confirmPasswordError').textContent = '';
        removeErrorClass('confirmPassword');
      }
    });

    // Clear errors when user focuses on input (unchanged)
    document.getElementById('password').addEventListener('focus', function() {
      if (this.classList.contains('error')) {
        removeErrorClass('password');
      }
    });

    document.getElementById('confirmPassword').addEventListener('focus', function() {
      if (this.classList.contains('error')) {
        removeErrorClass('confirmPassword');
      }
    });
  </script>
</body>
</html>
