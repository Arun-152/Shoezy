<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Shoezy - Reset Password</title>
  <link rel="stylesheet" href="/css/resetpass.css" />
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>
  <div class="container">
    <div class="left">
      <h1 class="brand">Shoezy</h1>
      <div class="circle"></div>
      <img src="/images/wmnsaijo1hiogutc_photo1.png" alt="Shoe" class="shoe-img" />
    </div>
    <div class="right">
      <h2>Reset Password</h2>
      <p>Enter your new password</p>
      <form id="resetPasswordForm">
        <div class="form-group">
          <label for="password">New Password</label>
          <input type="password" id="password" name="password" placeholder="Enter new password" required />
          <span class="error-message" id="passwordError"></span>
        </div>
        
        <div class="form-group">
          <label for="confirmPassword">Confirm Password</label>
          <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Confirm new password" required />
          <span class="error-message" id="confirmPasswordError"></span>
        </div>
        
        <button type="submit" class="btn" id="resetBtn">Reset Password</button>
      </form>
      
      <div style="margin-top: 20px; text-align: center;">
        <a href="/login" style="color: #007bff; text-decoration: none;">Back to Login</a>
      </div>
    </div>
  </div>

  <script>
    document.getElementById('resetPasswordForm').addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const password = document.getElementById('password').value;
      const confirmPassword = document.getElementById('confirmPassword').value;
      const resetBtn = document.getElementById('resetBtn');
      
      // Clear previous errors
      document.getElementById('passwordError').textContent = '';
      document.getElementById('confirmPasswordError').textContent = '';
      
      // Client-side validation
      let hasError = false;
      
      if (!password) {
        document.getElementById('passwordError').textContent = 'Password is required';
        hasError = true;
      } else if (password.length < 6) {
        document.getElementById('passwordError').textContent = 'Password must be at least 6 characters long';
        hasError = true;
      }
      
      if (!confirmPassword) {
        document.getElementById('confirmPasswordError').textContent = 'Please confirm your password';
        hasError = true;
      } else if (password !== confirmPassword) {
        document.getElementById('confirmPasswordError').textContent = 'Passwords do not match';
        hasError = true;
      }
      
      if (hasError) return;
      
      // Disable button and show loading
      resetBtn.disabled = true;
      resetBtn.textContent = 'Resetting...';
      
      try {
        const response = await fetch('/reset-password', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ password, confirmPassword })
        });
        
        const data = await response.json();
        
        if (data.success) {
          Swal.fire({
            icon: 'success',
            title: 'Password Reset Successful!',
            text: data.message,
            confirmButtonText: 'Login Now'
          }).then(() => {
            window.location.href = '/login';
          });
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Reset Failed',
            text: data.message,
            confirmButtonText: 'Try Again'
          });
        }
      } catch (error) {
        Swal.fire({
          icon: 'error',
          title: 'Network Error',
          text: 'Something went wrong. Please try again.',
          confirmButtonText: 'OK'
        });
      } finally {
        // Re-enable button
        resetBtn.disabled = false;
        resetBtn.textContent = 'Reset Password';
      }
    });
    
    // Real-time validation
    document.getElementById('password').addEventListener('input', function() {
      const password = this.value;
      const passwordError = document.getElementById('passwordError');
      
      if (password && password.length < 6) {
        passwordError.textContent = 'Password must be at least 6 characters long';
      } else {
        passwordError.textContent = '';
      }
      
      // Check confirm password match if it has value
      const confirmPassword = document.getElementById('confirmPassword').value;
      const confirmPasswordError = document.getElementById('confirmPasswordError');
      
      if (confirmPassword && password !== confirmPassword) {
        confirmPasswordError.textContent = 'Passwords do not match';
      } else if (confirmPassword) {
        confirmPasswordError.textContent = '';
      }
    });
    
    document.getElementById('confirmPassword').addEventListener('input', function() {
      const confirmPassword = this.value;
      const password = document.getElementById('password').value;
      const confirmPasswordError = document.getElementById('confirmPasswordError');
      
      if (confirmPassword && password !== confirmPassword) {
        confirmPasswordError.textContent = 'Passwords do not match';
      } else {
        confirmPasswordError.textContent = '';
      }
    });
  </script>

  <style>
    .error-message {
      color: #dc3545;
      font-size: 12px;
      margin-top: 5px;
      display: block;
    }
    
    .btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }
    
    .form-group {
      margin-bottom: 20px;
    }
    
    .form-group label {
      display: block;
      margin-bottom: 5px;
      font-weight: 500;
    }
    
    .form-group input {
      width: 100%;
      padding: 12px;
      border: 1px solid #ddd;
      border-radius: 4px;
      font-size: 14px;
    }
    
    .form-group input:focus {
      outline: none;
      border-color: #007bff;
    }
  </style>
</body>
</html>