<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details - Shoezy</title>
    <link rel="stylesheet" href="/css/orderDetailsPage.css">
    <link rel="stylesheet" href="/css/breadcrumbs.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<style>
    /* Reset and Base Styles */
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
        line-height: 1.6;
        color: #333;
        background-color: #f8fafc;
        min-height: 100vh;
        display: flex;
        flex-direction: column;
    }

    .btn-warning {
        background-color: #f0ad4e;
        /* Bootstrap-like warning color */
        border: none;
        color: #fff;
        padding: 10px 18px;
        font-size: 14px;
        font-weight: 600;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn-warning:hover {
        background-color: #ec971f;
        /* Darker orange on hover */
    }

    .btn-warning:active {
        background-color: #d58512;
        /* Even darker when pressed */
        transform: scale(0.97);
    }


    /* Navigation Styles */
    .navbar {
        background: #fff;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        z-index: 1000;
        height: 70px;
    }

    .nav-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        height: 70px;
    }

    .nav-logo h2 {
        color: #6366f1;
        font-size: 1.5rem;
        font-weight: 700;
    }

    .nav-menu {
        display: flex;
        list-style: none;
        gap: 30px;
    }

    .nav-link {
        text-decoration: none;
        color: #64748b;
        font-weight: 500;
        transition: color 0.3s ease;
    }

    .nav-link:hover,
    .nav-link.active {
        color: #6366f1;
    }

    /* Page Container - This wraps everything except navbar */
    .page-container {
        flex: 1;
        display: flex;
        flex-direction: column;
        margin-top: 70px;
        /* Account for fixed navbar */
    }

    /* Page Layout with Sidebar */
    .page-layout {
        display: flex;
        flex: 1;
        max-width: 1200px;
        margin: 0 auto;
        width: 100%;
        gap: 30px;
        padding: 20px;
        align-items: flex-start;
        min-height: calc(100vh - 70px);
        /* Full height minus navbar */
    }

    /* Sidebar - Same as address page */
    .sidebar {
        width: 280px;
        flex-shrink: 0;
        background: #fff;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        position: sticky;
        top: 90px;
        /* Below navbar with some spacing */
        max-height: calc(100vh - 110px);
        /* Proper max height to prevent footer overlap */
        overflow-y: auto;
        z-index: 100;
        border-right: 1px solid #ddd;
        padding: 20px 0;
    }

    /* Profile Section in Sidebar */
    .profile-section {
        text-align: center;
        padding: 20px;
        border-bottom: 1px solid #e2e8f0;
        margin-bottom: 10px;
    }

    .profile-avatar {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background: #6366f1;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        font-weight: 600;
        margin: 0 auto 10px;
    }

    .profile-section h3 {
        color: #1e293b;
        font-size: 1.1rem;
        font-weight: 600;
    }

    /* Sidebar Menu */
    .sidebar-menu {
        padding: 0 10px;
    }

    .sidebar-item {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 12px 15px;
        text-decoration: none;
        color: #64748b;
        border-radius: 8px;
        margin-bottom: 5px;
        transition: all 0.3s ease;
        font-weight: 500;
    }

    .sidebar-item:hover {
        background: #f1f5f9;
        color: #475569;
    }

    .sidebar-item.active {
        background: rgba(99, 102, 241, 0.1);
        color: #6366f1;
        border-left: 3px solid #6366f1;
    }

    .sidebar-item .material-icons {
        font-size: 20px;
    }

    /* Main Content */
    .main-content {
        flex: 1;
        min-width: 0;
        display: flex;
        flex-direction: column;
        padding: 0;
    }

    .container {
        max-width: 100%;
        margin: 0;
        padding: 0;
        flex: 1;
    }

    /* Breadcrumbs */
    .breadcrumb-wrapper {
        margin-bottom: 20px;
    }

    .breadcrumbs {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 14px;
        color: #64748b;
    }

    .breadcrumb-item {
        color: #64748b;
        text-decoration: none;
        transition: color 0.3s ease;
    }

    .breadcrumb-item:hover {
        color: #6366f1;
    }

    .breadcrumb-item.active {
        color: #1e293b;
        font-weight: 500;
    }

    .breadcrumb-separator {
        color: #cbd5e1;
    }

    /* Back Button */
    .back-button {
        margin-bottom: 20px;
    }

    .btn-back {
        color: #2563eb;
        text-decoration: none;
        font-weight: 500;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        padding: 8px 0;
        transition: color 0.3s ease;
    }

    .btn-back:hover {
        color: #1d4ed8;
    }

    /* Order Details Header */
    .order-details-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        padding: 25px;
        background: white;
        border-radius: 15px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .order-details-header h1 {
        color: #333;
        margin-bottom: 5px;
        font-size: 1.8rem;
        font-weight: 700;
    }

    .order-date {
        color: #666;
        font-size: 14px;
    }

    /* Order Content Grid */
    .order-content {
        display: grid;
        grid-template-columns: 2fr 1fr;
        gap: 30px;
        align-items: start;
    }

    /* Section Styles */
    .order-items-section,
    .order-summary-section,
    .delivery-address-section,
    .order-timeline-section,
    .order-actions-section {
        background: white;
        border-radius: 12px;
        padding: 25px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }

    .order-items-section {
        grid-column: 1 / 2;
    }

    .order-details-right-column {
        grid-column: 2 / 3;
        display: flex;
        flex-direction: column;
        gap: 30px;
        position: sticky;
        top: 90px;
    }

    .order-details-right-column .order-summary-section,
    .order-details-right-column .delivery-address-section {
        margin-bottom: 0;
    }

    .order-items-section h2,
    .order-summary-section h2,
    .delivery-address-section h2,
    .order-timeline-section h2 {
        color: #1e293b;
        margin-bottom: 20px;
        padding-bottom: 10px;
        border-bottom: 2px solid #f3f4f6;
        font-size: 1.5rem;
        font-weight: 600;
    }

    /* Item Card */
    .item-card {
        display: flex;
        align-items: center;
        gap: 20px;
        padding: 20px 0;
        border-bottom: 1px solid #f3f4f6;
    }

    .item-card:last-child {
        border-bottom: none;
    }

    .item-image img {
        width: 120px;
        height: 120px;
        object-fit: cover;
        border-radius: 10px;
    }

    .item-details {
        flex: 1;
    }

    .item-details h3 {
        color: #1e293b;
        margin-bottom: 8px;
        font-size: 1.1rem;
        font-weight: 600;
    }

    .item-description {
        color: #64748b;
        font-size: 14px;
        margin-bottom: 10px;
    }

    .item-specs {
        display: flex;
        gap: 20px;
    }

    .spec {
        color: #64748b;
        font-size: 14px;
    }

    .item-total {
        text-align: right;
    }

    .total-price {
        font-size: 18px;
        font-weight: 600;
        color: #2563eb;
    }

    /* Status Badges */
    .status-badge {
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 600;
        text-transform: uppercase;
    }

    .cancelled-badge {
        background: #fee2e2 !important;
        color: #991b1b !important;
    }

    .return-requested-badge {
        background: #fef3c7 !important;
        color: #92400e !important;
    }

    /* Summary Card */
.summary-card {
    background: #f8f9fa;
    padding: 20px;
    border-radius: 10px;
    border: 1px solid #e5e7eb;
}

.summary-details {
    margin-bottom: 15px;
}

.summary-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 8px 0;
    color: #4b5563;
}

.summary-label {
    font-weight: 500;
}

.summary-value {
    font-weight: 600;
}

.summary-value.discount {
    color: #ef4444; /* Red for discount */
}

.summary-value.free {
    color: #22c55e; /* Green for free shipping */
    font-weight: 700;
}

.summary-total {
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-top: 2px solid #e5e7eb;
    padding-top: 15px;
    margin-top: 10px;
}

.total-label {
    font-size: 1.1rem;
    font-weight: 700;
    color: #1f2937;
}

.total-amount {
    font-size: 1.2rem;
    font-weight: 700;
    color: #6366f1;
}

.payment-method {
    margin-top: 20px;
    padding-top: 15px;
    border-top: 1px dashed #d1d5db;
    display: flex;
    justify-content: space-between;
    align-items: center;
    color: #4b5563;
}

.payment-label {
    font-weight: 500;
}

.payment-value {
    font-weight: 600;
    background-color: #e0e7ff;
    color: #4338ca;
    padding: 4px 10px;
    border-radius: 15px;
    font-size: 0.9rem;
}


    .free {
        color: #10b981;
        font-weight: 600;
    }

    .payment-method {
        margin-top: 15px;
        padding-top: 15px;
        border-top: 1px solid #e5e7eb;
        color: #64748b;
        font-size: 14px;
    }

    /* Address Card */
    .address-card {
        background: #f8f9fa;
        padding: 20px;
        border-radius: 10px;
    }

    .address-header h3 {
        color: #1e293b;
        margin-bottom: 15px;
    }

    .address-details p {
        margin: 5px 0;
        color: #64748b;
    }

    /* Timeline */
    .timeline {
        position: relative;
    }

    .timeline::before {
        content: '';
        position: absolute;
        left: 20px;
        top: 0;
        bottom: 0;
        width: 2px;
        background: #e5e7eb;
    }

    .timeline-item {
        position: relative;
        padding-left: 60px;
        margin-bottom: 30px;
    }

    .timeline-item:last-child {
        margin-bottom: 0;
    }

    .timeline-icon {
        position: absolute;
        left: 0;
        top: 0;
        width: 40px;
        height: 40px;
        background: #f3f4f6;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 16px;
        border: 3px solid white;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .timeline-item.active .timeline-icon {
        background: #2563eb;
        color: white;
    }

    .timeline-content h4 {
        color: #1e293b;
        margin-bottom: 5px;
        font-weight: 600;
    }

    .timeline-content p {
        color: #64748b;
        font-size: 14px;
    }

    /* Buttons */
    .btn-primary,
    .btn-secondary,
    .btn-danger {
        padding: 12px 24px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-block;
        font-size: 14px;
    }

    .btn-primary {
        background: #6366f1;
        color: white;
    }

    .btn-primary:hover {
        background: #5855eb;
    }

    .btn-secondary {
        background: #f3f4f6;
        color: #374151;
        border: 1px solid #d1d5db;
    }

    .btn-secondary:hover {
        background: #e5e7eb;
    }

    .btn-danger {
        background: #dc2626;
        color: white;
    }

    .btn-danger:hover {
        background: #b91c1c;
    }

    .action-buttons {
        display: flex;
        gap: 15px;
        flex-wrap: wrap;
    }

    /* Modal Styles */
    .modal {
        display: none;
        position: fixed;
        z-index: 2000;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        max-width: 500px;
        width: 90%;
        background: white;
        border-radius: 15px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
        animation: modalSlideIn 0.3s ease;
    }

    .modal-overlay {
        display: none;
        position: fixed;
        z-index: 1999;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        backdrop-filter: blur(5px);
    }

    .modal.show,
    .modal-overlay.show {
        display: block;
    }

    @keyframes modalSlideIn {
        from {
            opacity: 0;
            transform: translate(-50%, -60%);
        }

        to {
            opacity: 1;
            transform: translate(-50%, -50%);
        }
    }

    .modal-content {
        background: white;
        border-radius: 15px;
        overflow: hidden;
    }

    .modal-header {
        background: #f8f9fa;
        padding: 20px 25px;
        border-bottom: 1px solid #e5e7eb;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .modal-header h2 {
        margin: 0;
        color: #1e293b;
        font-size: 20px;
    }

    .close {
        color: #64748b;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
        transition: color 0.3s ease;
        line-height: 1;
    }

    .close:hover {
        color: #1e293b;
    }

    .modal-body {
        padding: 25px;
    }

    .return-item-info h3 {
        color: #1e293b;
        margin-bottom: 10px;
        font-size: 18px;
    }

    .return-item-info p {
        color: #64748b;
        margin-bottom: 20px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-group label {
        display: block;
        margin-bottom: 8px;
        color: #1e293b;
        font-weight: 500;
    }

    .form-control {
        width: 100%;
        padding: 12px;
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        font-size: 14px;
        transition: border-color 0.3s ease;
        box-sizing: border-box;
    }

    .form-control:focus {
        outline: none;
        border-color: #2563eb;
    }

    select.form-control {
        cursor: pointer;
    }

    .return-policy-note {
        background: #f0f9ff;
        border: 1px solid #bfdbfe;
        border-radius: 8px;
        padding: 15px;
        margin-top: 20px;
        display: flex;
        gap: 10px;
        align-items: flex-start;
    }

    .return-policy-note i {
        color: #2563eb;
        margin-top: 2px;
    }

    .return-policy-note p {
        margin: 0;
        color: #1e40af;
        font-size: 13px;
    }

    .modal-footer {
        background: #f8f9fa;
        padding: 20px 25px;
        border-top: 1px solid #e5e7eb;
        display: flex;
        gap: 15px;
        justify-content: flex-end;
    }

    .modal-footer .btn-primary,
    .modal-footer .btn-secondary {
        min-width: 120px;
        text-align: center;
    }

    /* Footer - Same as address page */
    .footer {
        background: #1e293b;
        color: #e2e8f0;
        padding: 40px 0 20px;
        margin-top: 40px;
        flex-shrink: 0;
        position: relative;
        z-index: 50;
    }

    .footer-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
    }

    .footer-content {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 30px;
        margin-bottom: 30px;
    }

    .footer-section h3 {
        color: #fff;
        font-size: 1.1rem;
        font-weight: 600;
        margin-bottom: 15px;
    }

    .footer-section ul {
        list-style: none;
    }

    .footer-section ul li {
        margin-bottom: 8px;
    }

    .footer-section ul li a {
        color: #94a3b8;
        text-decoration: none;
        transition: color 0.3s ease;
    }

    .footer-section ul li a:hover {
        color: #e2e8f0;
    }

    .footer-section p {
        color: #94a3b8;
        margin-bottom: 8px;
    }

    .social-links {
        display: flex;
        gap: 10px;
    }

    .social-links a {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        width: 40px;
        height: 40px;
        background: #334155;
        border-radius: 50%;
        color: #94a3b8;
        text-decoration: none;
        transition: all 0.3s ease;
    }

    .social-links a:hover {
        background: #475569;
        color: #e2e8f0;
    }

    .footer-bottom {
        text-align: center;
        padding-top: 20px;
        border-top: 1px solid #334155;
    }

    .footer-bottom p {
        color: #94a3b8;
    }

    /* Responsive Design */
    @media screen and (max-width: 1024px) {
        .page-layout {
            gap: 20px;
            padding: 15px;
        }

        .sidebar {
            width: 250px;
        }
    }

    @media screen and (max-width: 768px) {
        .page-layout {
            flex-direction: column;
            padding: 15px;
            align-items: stretch;
        }

        .sidebar {
            position: static;
            width: 100%;
            max-height: none;
            margin-bottom: 20px;
            border-radius: 12px;
        }

        .main-content {
            margin-left: 0;
            overflow-y: visible;
        }

        .order-content {
            grid-template-columns: 1fr;
        }

        .order-items-section,
        .order-summary-section,
        .delivery-address-section,
        .order-timeline-section,
        .order-actions-section {
            grid-column: 1 / -1;
        }

        .order-details-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 15px;
        }

        .item-card {
            flex-direction: column;
            text-align: center;
        }

        .action-buttons {
            justify-content: center;
        }

        .modal {
            width: 95%;
            max-width: none;
        }

        .modal-body {
            padding: 20px;
        }

        .modal-footer {
            flex-direction: column;
        }

        .modal-footer .btn-primary,
        .modal-footer .btn-secondary {
            width: 100%;
        }

        .footer-content {
            grid-template-columns: 1fr;
            gap: 20px;
            text-align: center;
        }
    }

    @media screen and (max-width: 480px) {
        .page-layout {
            padding: 10px;

        }

        .order-details-header,
        .order-items-section,
        .order-summary-section,
        .delivery-address-section,
        .order-timeline-section,
        .order-actions-section {
            padding: 15px;


            .item-card {
                padding: 15px 0;
            }

            .modal-content {
                padding: 15px;
            }
        }
</style>

<body>
    <%- include("../partials/user/navbar") %>

        <!-- Main Layout Container -->
        <div class="page-container">
            <!-- Main Layout with Sidebar -->
            <div class="page-layout">
                <!-- Sidebar -->
                <aside class="sidebar">
                    <%- include("../partials/user/profileSidebar") %>
                </aside>

                <!-- Main Content -->
                <main class="main-content">
                    <div class="container">
                        <!-- Breadcrumbs -->


                        <div class="back-button">
                            <a href="/order" class="btn-back">← Back to Orders</a>
                        </div>

                        <div class="order-details-header">
                            <div class="order-info">
                                <h1>Order #<%= order.orderNumber %>
                                </h1>
                                <p class="order-date">Placed on <%= new
                                        Date(order.createdAt).toLocaleDateString('en-US', { year: 'numeric' ,
                                        month: 'long' , day: 'numeric' }) %>
                                </p>
                            </div>
                        </div>

                        <div class="order-content">
                            <!-- Order Items -->
                            <div class="order-items-section">
                                <h2>Order Items</h2>
                                <div class="items-list">
                                    <% order.items.forEach(item=> { %>
                                        <div class="item-card">
                                            <!-- Product Image -->
                                            <div class="item-image">
                                                <img src="<%= item.productId.images && item.productId.images.length > 0 ? item.productId.images[0] : 'https://via.placeholder.com/120x120/ffffff/cccccc?text=Shoe' %>"
                                                    alt="<%= item.productId.productName %>">
                                            </div>

                                            <!-- Product Details -->
                                            <div class="item-details">
                                                <h3>
                                                    <%= item.productId.productName %>
                                                </h3>
                                                <p class="item-description">
                                                    <%= item.productId.description || 'No description available' %>
                                                </p>
                                                <div class="item-specs">
                                                    <span class="spec">Quantity: <%= item.quantity %></span>
                                                    <span class="spec">Price: ₹<%= item.price.toLocaleString() %></span>
                                                    <span class="spec">Status: <%= item.status %></span>
                                                </div>
                                            </div>

                                            <!-- Total Price -->
                                            <div class="item-total">
                                                <span class="total-price">₹<%= item.totalPrice.toLocaleString() %>
                                                </span>
                                            </div>

                                            <!-- Cancel or Return Button -->
                                            <div class="item-actions">
                                                <% if (order.paymentStatus==='Failed' ) { %>
                                                    <form action="/payment/retryPayment/<%= order._id %>" method="get">
                                                        <button type="submit" class="btn btn-warning">Retry
                                                            Payment</button>
                                                    </form>

                                                    <% } else { %>
                                                        <% if (item.status==='Pending' || item.status==='Processing' ) {
                                                            %>
                                                            <button class="btn-danger"
                                                                onclick="cancelSingleItem('<%= order._id %>', '<%= item._id %>', this)" data-item-price="<%= item.totalPrice %>">Cancel
                                                                Item</button>
                                                            <% } else if (item.status==='Delivered' ) { %>
                                                                <button class="btn-secondary"
                                                                    onclick="showReturnModal('<%= order._id %>', '<%= item.productId._id %>', '<%= item.productId.productName %>', this)" data-item-price="<%= item.totalPrice %>">Return</button>
                                                                <% } else if (item.status==='Cancelled' ) { %>
                                                                    <span
                                                                        class="status-badge cancelled-badge">Cancelled</span>
                                                                    <% } else if (item.status==='ReturnRequested' ) { %>
                                                                        <span
                                                                            class="status-badge return-requested-badge">Return
                                                                            Requested</span>
                                                                        <% } else if (item.status==='Returned' ) { %>
                                                                            <span
                                                                                class="status-badge return-requested-badge">Return</span>
                                                                            <% } %>
                                                                                <% } %>
                                            </div>
                                        </div>
                                        <% }); %>
                                </div>

                                <!-- Delivery Address -->
                                <div class="delivery-address-section">
                                    <h2>Delivery Address</h2>
                                    <div class="address-card">
                                        <div class="address-header">
                                            <h3>
                                                <%= order.address.addressType %>
                                            </h3>
                                        </div>
                                        <div class="address-details">
                                            <p><strong>
                                                    <%= order.address.fullName %>
                                                </strong></p>
                                            <p>
                                                <%= order.address.address %>
                                            </p>
                                            <% if (order.address.landmark) { %>
                                                <p>Landmark: <%= order.address.landmark %>
                                                </p>
                                                <% } %>
                                                    <p>
                                                        <%= order.address.city %>, <%= order.address.district %>
                                                    </p>
                                                    <p>
                                                        <%= order.address.state %> - <%= order.address.pinCode %>
                                                    </p>
                                                    <p>Phone: <%= order.address.mobileNumber %>
                                                    </p>
                                        </div>
                                    </div>
                                </div>

                                <!-- Order Timeline -->
                                <div class="order-timeline-section">
                                    <h2>Order Timeline</h2>
                                    <div class="timeline">
                                        <% 
                                        const findStatusDate = (status) => {
                                            const entry = order.statusHistory.find(h => h.status === status);
                                            return entry ? new Date(entry.date).toLocaleString('en-US', { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' }) : 'Pending';
                                        };
                                        const orderedDate = new Date(order.createdAt).toLocaleString('en-US', { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' });
                                        const processingDate = findStatusDate('Processing');
                                        const shippedDate = findStatusDate('Shipped');
                                        const deliveredDate = order.deliveryDate ? new Date(order.deliveryDate).toLocaleString('en-US', { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' }) : findStatusDate('Delivered');
                                        const cancelledDate = findStatusDate('Cancelled');
                                        const returnedDate = findStatusDate('Returned');
                                        const failedDate = findStatusDate('Failed');
                                        
                                        const hasStatus = (status) => order.statusHistory.some(h => h.status === status) || order.orderStatus === status;
                                        %>
                                
                                        <!-- Order Placed -->
                                        <div class="timeline-item active">
                                            <div class="timeline-icon">✓</div>
                                            <div class="timeline-content">
                                                <h4>Order Placed</h4>
                                                <p><%= orderedDate %></p>
                                            </div>
                                        </div>
                                
                                        <% if (order.paymentStatus === 'Failed' || order.orderStatus === 'Failed') { %>
                                            <!-- Failed -->
                                            <div class="timeline-item active cancelled">
                                                <div class="timeline-icon">❌</div>
                                                <div class="timeline-content">
                                                    <h4>Payment Failed</h4>
                                                    <p>Your payment could not be processed. <%= failedDate %></p>
                                                </div>
                                            </div>
                                        <% } else if (order.orderStatus === 'Cancelled') { %>
                                            <!-- Cancelled Flow -->
                                            <div class="timeline-item active">
                                                <div class="timeline-icon">📦</div>
                                                <div class="timeline-content">
                                                    <h4>Order Processed</h4>
                                                    <p><%= processingDate %></p>
                                                </div>
                                            </div>
                                            <div class="timeline-item active cancelled">
                                                <div class="timeline-icon">❌</div>
                                                <div class="timeline-content">
                                                    <h4>Cancelled</h4>
                                                    <p>Order was cancelled on <%= cancelledDate %>. Reason: <%= order.cancellationReason || 'N/A' %></p>
                                                </div>
                                            </div>
                                        <% } else if (order.orderStatus === 'Returned') { %>
                                            <!-- Returned Flow -->
                                            <div class="timeline-item active"><div class="timeline-icon">📦</div><div class="timeline-content"><h4>Order Processed</h4><p><%= processingDate %></p></div></div>
                                            <div class="timeline-item active"><div class="timeline-icon">🚚</div><div class="timeline-content"><h4>Shipped</h4><p><%= shippedDate %></p></div></div>
                                            <div class="timeline-item active"><div class="timeline-icon">🏠</div><div class="timeline-content"><h4>Delivered</h4><p><%= deliveredDate %></p></div></div>
                                            <div class="timeline-item active cancelled"><div class="timeline-icon">↩️</div><div class="timeline-content"><h4>Returned</h4><p>Order returned on <%= returnedDate %></p></div></div>
                                        <% } else { %>
                                            <!-- Normal Flow -->
                                            <!-- Order Processed -->
                                            <div class="timeline-item <%= ['Processing', 'Shipped', 'Delivered', 'ReturnRequested', 'ReturnApproved'].includes(order.orderStatus) ? 'active' : '' %>">
                                                <div class="timeline-icon">📦</div>
                                                <div class="timeline-content">
                                                    <h4>Order Processed</h4>
                                                    <p><%= hasStatus('Processing') ? processingDate : 'Waiting for confirmation' %></p>
                                                </div>
                                            </div>
                                
                                            <!-- Shipped -->
                                            <div class="timeline-item <%= ['Shipped', 'Delivered', 'ReturnRequested', 'ReturnApproved'].includes(order.orderStatus) ? 'active' : '' %>">
                                                <div class="timeline-icon">🚚</div>
                                                <div class="timeline-content">
                                                    <h4>Shipped</h4>
                                                    <p><%= hasStatus('Shipped') ? shippedDate : 'Preparing for shipment' %></p>
                                                </div>
                                            </div>
                                
                                            <!-- Delivered -->
                                            <div class="timeline-item <%= ['Delivered', 'ReturnRequested', 'ReturnApproved'].includes(order.orderStatus) ? 'active' : '' %>">
                                                <div class="timeline-icon">🏠</div>
                                                <div class="timeline-content">
                                                    <h4>Delivered</h4>
                                                    <p><%= hasStatus('Delivered') ? deliveredDate : 'Estimated delivery in 3-5 days' %></p>
                                                </div>
                                            </div>
                                
                                            <!-- Return Requested -->
                                            <% if (['ReturnRequested', 'ReturnApproved'].includes(order.orderStatus)) { %>
                                                <div class="timeline-item active">
                                                    <div class="timeline-icon">❓</div>
                                                    <div class="timeline-content">
                                                        <h4>Return Requested</h4>
                                                        <p>Return request submitted on <%= findStatusDate('ReturnRequested') %></p>
                                                    </div>
                                                </div>
                                            <% } %>
                                        <% } %>
                                    </div>
                                </div>

                                <!-- Order Actions -->
                                <div class="order-actions-section">
                                    <div class="action-buttons">
                                        <!-- Cancel Order Button for eligible orders -->
                                        

                                                <% if (order.orderStatus==='Shipped' ) { %>
                                                    <button class="btn-primary">Track Package</button>
                                                    <% } %>

                                                        <a href="/order/<%= order._id %>/invoice">
                                                            <button class="btn-secondary">Download Invoice</button>
                                                        </a>
                                    </div>
                                </div>
                            </div>

                            <div class="order-details-right-column">
                                <!-- Order Summary -->
                                <div class="order-summary-section">
                                    <h2>Order Summary</h2>
                                    <div class="summary-card">
                                        <div class="summary-details">
                                            <!-- Subtotal -->
                                            <div class="summary-row">
                                                <span class="summary-label">Subtotal</span>
                                                <span class="summary-value">₹<%= order.subtotal.toLocaleString() %></span>
                                            </div>

                                            <!-- Coupon Discount -->
                                            <% if (order.couponDiscount > 0) { %>
                                            <div class="summary-row">
                                                <span class="summary-label">Coupon Discount</span>
                                                <span class="summary-value discount">- ₹<%= order.couponDiscount.toLocaleString() %></span>
                                            </div>
                                            <% } %>

                                            <!-- Shipping -->
                                            <div class="summary-row">
                                                <span class="summary-label">Shipping</span>
                                                <span class="summary-value free">FREE</span>
                                            </div>
                                        </div>

                                        <!-- Total -->
                                        <div class="summary-total">
                                            <span class="total-label">Total</span>
                                            <span class="total-amount">₹<%= order.finalAmount.toLocaleString() %></span>
                                        </div>

                                        <!-- Payment Method -->
                                        <div class="payment-method">
                                            <span class="payment-label">Payment Method:</span>
                                            <span class="payment-value"><%= order.paymentMethod %></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </main>
            </div>
        </div>

        <!-- Return Modal -->
        <div id="returnModal" class="modal">
            <div class="modal-content">
                <div class="modal-header">
                    <h2>Return Request</h2>
                    <span class="close" onclick="closeReturnModal()">&times;</span>
                </div>
                <div class="modal-body">
                    <div class="return-item-info">
                        <h3 id="returnItemName"></h3>
                        <p>Please select a reason for returning this item:</p>
                    </div>

                    <div class="return-form">
                        <div class="form-group">
                            <label for="returnReason">Return Reason *</label>
                            <select id="returnReason" class="form-control" required>
                                <option value="">Select a reason</option>
                                <option value="defective">Defective/Damaged Product</option>
                                <option value="wrong-item">Wrong Item Delivered</option>
                                <option value="size-issue">Size Issue</option>
                                <option value="quality">Quality Not as Expected</option>
                                <option value="not-as-described">Not as Described</option>
                                <option value="changed-mind">Changed Mind</option>
                                <option value="late-delivery">Late Delivery</option>
                                <option value="other">Other</option>
                            </select>
                        </div>

                        <div class="return-policy-note">
                            <i class="fas fa-info-circle"></i>
                            <p><strong>Return Policy:</strong> Items can be returned within 7 days of delivery. Please
                                ensure the item is in original condition with tags attached.</p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn-secondary" onclick="closeReturnModal()">Cancel</button>
                    <button type="button" class="btn-primary" onclick="submitReturnRequest()">Submit Return
                        Request</button>
                </div>
            </div>
        </div>

        <!-- Modal Overlay -->
        <div id="modalOverlay" class="modal-overlay" onclick="closeReturnModal()"></div>

        <%- include("../partials/user/userfooter") %>

           <script>
    // Global variables to store return request data
    let currentOrderId = '';
    let currentItemsId = '';
    let currentProductName = '';
    let currentReturnButton = null;

    function updateOrderSummary(amountToSubtract) {
        const subtotalEl = document.querySelector('.summary-row:first-child .summary-value');
        const totalEl = document.querySelector('.total-amount');

        if (!subtotalEl || !totalEl) return;

        // Function to parse currency string
        const parseCurrency = (str) => parseFloat(str.replace(/[^0-9.-]+/g, ''));

        // Update Subtotal
        let currentSubtotal = parseCurrency(subtotalEl.textContent);
        let newSubtotal = currentSubtotal - amountToSubtract;
        subtotalEl.textContent = `₹${newSubtotal.toLocaleString()}`;

        // Update Total
        let currentTotal = parseCurrency(totalEl.textContent);
        let newTotal = currentTotal - amountToSubtract;
        totalEl.textContent = `₹${newTotal.toLocaleString()}`;
    }

  function updateUIAfterItemRemoval(button, newStatus, amountToSubtract = 0) {
    const itemCard = button.closest('.item-card');
    if (!itemCard) return;

    // Update status text in the item details
    const statusElement = itemCard.querySelector('.spec:last-child');
    if (statusElement) {
        statusElement.textContent = `Status: ${newStatus}`;
    }

    // Replace the button with a status badge
    const actionsDiv = itemCard.querySelector('.item-actions');
    if (actionsDiv) {
        let badgeClass = '';
        let badgeText = '';

        if (newStatus === 'Cancelled') {
            badgeClass = 'cancelled-badge';
            badgeText = 'Cancelled';
        } else if (newStatus === 'ReturnRequested') {
            badgeClass = 'return-requested-badge';
            badgeText = 'Return Requested';
        } else if (newStatus === 'ReturnApproved') {
            badgeClass = 'return-approved-badge';
            badgeText = 'Return Approved';
        }

        actionsDiv.innerHTML = `<span class="status-badge ${badgeClass}">${badgeText}</span>`;
    }

    // Update the order summary only for Cancelled or ReturnApproved items
    if (newStatus === 'Cancelled' || newStatus === 'ReturnApproved') {
        const itemPrice = amountToSubtract || parseFloat(button.getAttribute('data-item-price'));
        if (!isNaN(itemPrice)) {
            updateOrderSummary(itemPrice);
        }
    }
}

    // Show return modal function
    function showReturnModal(orderId, itemsId, productName, button) {
        currentOrderId = orderId;
        currentItemsId = itemsId;
        currentProductName = productName;
        currentReturnButton = button;

        // Update modal content
        document.getElementById('returnItemName').textContent = productName;
        // Clear form
        document.getElementById('returnReason').value = '';
        // Show modal
        document.getElementById('returnModal').classList.add('show');
        document.getElementById('modalOverlay').classList.add('show');
        document.body.style.overflow = 'hidden';
    }

    // Close return modal function
    function closeReturnModal() {
        document.getElementById('returnModal').classList.remove('show');
        document.getElementById('modalOverlay').classList.remove('show');
        document.body.style.overflow = 'auto';
    }

    // Submit return request function
    async function submitReturnRequest() {
        const returnReason = document.getElementById('returnReason').value;
        if (!returnReason) {
            Swal.fire({
                title: 'Missing Information',
                text: 'Please select a return reason.',
                icon: 'warning',
                confirmButtonColor: '#dc2626'
            });
            return;
        }

        try {
            const submitBtn = document.querySelector('.modal-footer .btn-primary');
            const originalText = submitBtn.textContent;
            submitBtn.textContent = 'Processing...';
            submitBtn.disabled = true;

            const requestData = {
                orderId: currentOrderId,
                itemsId: currentItemsId,
                reason: returnReason
            };

            const response = await fetch('/order/individualOrderReturn', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'include',
                body: JSON.stringify(requestData)
            });

            const data = await response.json();
            // Reset button state
            submitBtn.textContent = originalText;
            submitBtn.disabled = false;

            if (data.success) {
                closeReturnModal();
                updateUIAfterItemRemoval(currentReturnButton, 'ReturnRequested'); // This will now correctly NOT change the total

                Swal.fire({
                    title: 'Return Request Submitted!',
                    text: data.message,
                    icon: 'success',
                    confirmButtonColor: '#2563eb'
                });
            } else {
                if (data.showModalError) {
                    closeReturnModal();
                    Swal.fire({
                        title: 'Return Not Possible',
                        text: data.message, // Use the message directly from the backend response
                        icon: 'error',
                        confirmButtonColor: '#dc2626'
                    });
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: data.message || 'Failed to submit return request. Please try again.',
                        icon: 'error',
                        confirmButtonColor: '#dc2626'
                    });
                }
            }
        } catch (error) {
            console.error('Return request error:', error);
            // Reset button state in case of error
            const submitBtn = document.querySelector('.modal-footer .btn-primary');
            submitBtn.textContent = 'Submit Return Request';
            submitBtn.disabled = false;

            Swal.fire({
                title: 'Error!',
                text: 'Something went wrong. Please try again.',
                icon: 'error',
                confirmButtonColor: '#dc2626'
            });
        }
    }

    // Cancel single item function
    async function cancelSingleItem(orderId, itemsId, button) {
        try {
            const {
                value: reason,
                isConfirmed
            } = await Swal.fire({
                title: 'Cancel Item?',
                text: 'Are you sure you want to cancel this item?',
                input: 'select',
                inputLabel: 'Cancellation Reason',
                inputPlaceholder: 'Select a reason for cancellation',
                inputOptions: {
                    'changed-mind': 'Changed my mind',
                    'found-better-price': 'Found a better price elsewhere',
                    'ordered-by-mistake': 'Ordered by mistake',
                    'wrong-size': 'Wrong size selected',
                    'no-longer-needed': 'No longer needed',
                    'other': 'Other reasons'
                },
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#dc2626',
                cancelButtonColor: '#6b7280',
                confirmButtonText: 'Yes, cancel item',
                cancelButtonText: 'No, keep item',
                inputValidator: (value) => {
                    if (!value) {
                        return 'Please select a cancellation reason';
                    }
                }
            });

            if (isConfirmed) {
                const response = await fetch('/order/cancel', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    credentials: 'include',
                    body: JSON.stringify({
                        orderId: orderId,
                        itemsId: itemsId,
                        reason: reason || 'Item cancelled by customer'
                    })
                });

                const data = await response.json();

                if (data.success) {
                    Swal.fire({
                        title: 'Item Cancelled!',
                        text: data.message,
                        icon: 'success',
                        confirmButtonColor: '#2563eb'
                    })
                    updateUIAfterItemRemoval(button, 'Cancelled'); // This will correctly change the total
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: data.message || 'Failed to cancel item',
                        icon: 'error',
                        confirmButtonColor: '#dc2626'
                    });
                }
            }
        } catch (error) {
            console.error('Cancel item error:', error);
            Swal.fire({
                title: 'Error!',
                text: 'Something went wrong. Please try again.',
                icon: 'error',
                confirmButtonColor: '#dc2626'
            });
        }
    }

    // Close modal when clicking outside
    window.onclick = function(event) {
        const modal = document.getElementById('returnModal');
        const overlay = document.getElementById('modalOverlay');
        if (event.target === overlay) {
            closeReturnModal();
        }
    }

    // Close modal with Escape key
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape') {
            const modal = document.getElementById('returnModal');
            if (modal.classList.contains('show')) {
                closeReturnModal();
            }
        }
    });
</script>
</body>

</html>