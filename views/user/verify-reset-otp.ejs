<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Shoezy - Verify OTP</title>
  <link rel="stylesheet" href="/css/forgott.css" />
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>
  <div class="container">
    <div class="left">
      <h1 class="brand">Shoezy</h1>
      <div class="circle"></div>
      <img src="/images/fashion-shoes-sneakers_1203-7529.avif" alt="Shoe" class="shoe-img" />
    </div>
    <div class="right">
      <h2>Verify OTP</h2>
      <p>Please enter the 6-digit OTP sent to your email</p>
      <form id="verifyOtpForm">
        <div class="form-group">
          <label for="otp">Enter OTP</label>
          <input type="text" id="otp" name="otp" placeholder="Enter 6-digit OTP" maxlength="6" required />
          <span class="error-message" id="otpError"></span>
        </div>
        <button type="submit" class="btn" id="verifyBtn">Verify OTP</button>
      </form>
      
      <!-- Resend OTP Section -->
      <div style="margin-top: 20px; text-align: center;">
        <button type="button" class="resend-btn" id="resendBtn">Resend OTP</button>
        <div id="resendCooldown" style="display: none; color: #666; font-size: 14px; margin-top: 10px;">
          Resend available in: <span id="cooldownTimer">60</span> seconds
        </div>
      </div>
      
      <div style="margin-top: 15px; text-align: center;">
        <a href="/forgot-password" style="color: #007bff; text-decoration: none;">Start Over</a> |
        <a href="/login" style="color: #007bff; text-decoration: none;">Back to Login</a>
      </div>
      
      <!-- Timer Display -->
      <div style="margin-top: 15px; text-align: center;">
        <span id="timer" style="color: #666; font-size: 14px;">OTP expires in: <span id="countdown">1:00</span></span>
      </div>
    </div>
  </div>

  <script>
    // Timer functionality
    let timeLeft = 60; // 60 seconds OTP validity
    const countdownElement = document.getElementById('countdown');
    let expiredAlertShown = false; // Flag to prevent multiple expired alerts
    
    function updateTimer() {
      const minutes = Math.floor(timeLeft / 60);
      const seconds = timeLeft % 60;
      countdownElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
      
      if (timeLeft <= 0) {
        clearInterval(timerInterval);

        // Only show expired alert if it hasn't been shown already
        if (!expiredAlertShown) {
          expiredAlertShown = true;
          Swal.fire({
            icon: 'warning',
            title: 'OTP Expired',
            text: 'Your OTP has expired. Please click the Resend OTP button to get a new one.',
            confirmButtonText: 'OK'
          }).then(() => {
            // Enable the resend button immediately when OTP expires
            if (resendCooldownActive) {
              clearInterval(resendCooldownInterval);
              resendCooldownActive = false;
              const resendBtn = document.getElementById('resendBtn');
              const resendCooldown = document.getElementById('resendCooldown');
              resendBtn.style.display = 'inline-block';
              resendBtn.disabled = false;
              resendBtn.textContent = 'Resend OTP';
              resendCooldown.style.display = 'none';
            }
          });
        }
      }
      timeLeft--;
    }
    
    let timerInterval = setInterval(updateTimer, 1000);
    updateTimer(); // Initial call

    // Function to reset timer completely
    function resetTimer() {
      // Clear existing timer interval
      if (timerInterval) {
        clearInterval(timerInterval);
      }

      // Reset expired alert flag
      expiredAlertShown = false;

      // Reset time and restart timer
      timeLeft = 60; // 60 seconds OTP validity
      timerInterval = setInterval(updateTimer, 1000);
      updateTimer();
    }

    document.getElementById('verifyOtpForm').addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const otp = document.getElementById('otp').value.trim();
      const otpError = document.getElementById('otpError');
      const verifyBtn = document.getElementById('verifyBtn');
      
      // Clear previous errors
      otpError.textContent = '';
      
      // Client-side validation
      if (!otp) {
        otpError.textContent = 'OTP is required';
        return;
      }
      
      if (otp.length !== 6 || !/^\d{6}$/.test(otp)) {
        otpError.textContent = 'OTP must be exactly 6 digits';
        return;
      }
      
      // Disable button and show loading
      verifyBtn.disabled = true;
      verifyBtn.textContent = 'Verifying...';
      
      try {
        const response = await fetch('/verify-reset-otp', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ otp })
        });
        
        const data = await response.json();
       if (data.success) {
  clearInterval(timerInterval); // Stop timer
  Swal.fire({
    icon: 'success',
    title: 'OTP Verified!',
    text: data.message,
    confirmButtonText: 'Reset Password'
  }).then(() => {
    window.location.href = '/reset-password';
  });
} else {
  // Check if OTP expired
  if (data.message && data.message.toLowerCase().includes("expired")) {
    clearInterval(timerInterval); // Stop countdown
    document.getElementById('resendBtn').style.display = 'inline-block'; // Show resend button
    document.getElementById('resendBtn').disabled = false;
    document.getElementById('resendCooldown').style.display = 'none';   // Hide countdown
  }

  Swal.fire({
    icon: 'error',
    title: 'Verification Failed',
    text: data.message,
    confirmButtonText: 'Try Again'
  });
}

      } catch (error) {
        Swal.fire({
          icon: 'error',
          title: 'Network Error',
          text: 'Something went wrong. Please try again.',
          confirmButtonText: 'OK'
        });
      } finally {
        // Re-enable button
        verifyBtn.disabled = false;
        verifyBtn.textContent = 'Verify OTP';
      }
    });
    
    // Auto-focus and numeric input only
    document.getElementById('otp').addEventListener('input', function() {
      const otp = this.value;
      const otpError = document.getElementById('otpError');
      
      // Allow only numbers
      this.value = otp.replace(/[^0-9]/g, '');
      
      if (this.value && this.value.length !== 6) {
        otpError.textContent = 'OTP must be exactly 6 digits';
      } else {
        otpError.textContent = '';
      }
    });
    
    // Auto-focus on page load
    document.getElementById('otp').focus();

    // Resend OTP functionality
    let resendCooldownActive = true; // Start with cooldown active
    let resendCooldownTime = 60; // 60 seconds resend OTP cooldown
    let resendCooldownInterval;

    // Function to start resend cooldown
    function startResendCooldown() {
      resendCooldownActive = true;
      resendCooldownTime = 60; // 60 seconds resend OTP cooldown

      const resendBtn = document.getElementById('resendBtn');
      const resendCooldown = document.getElementById('resendCooldown');
      const cooldownTimer = document.getElementById('cooldownTimer');

      // Hide button and show cooldown
      resendBtn.style.display = 'none';
      resendCooldown.style.display = 'block';

      resendCooldownInterval = setInterval(() => {
        cooldownTimer.textContent = resendCooldownTime;
        resendCooldownTime--;

        if (resendCooldownTime < 0) {
          clearInterval(resendCooldownInterval);
          resendCooldownActive = false;

          // Show button and hide cooldown
          resendBtn.style.display = 'inline-block';
          resendBtn.disabled = false;
          resendBtn.textContent = 'Resend OTP';
          resendCooldown.style.display = 'none';
        }
      }, 1000);
    }

    // Start initial cooldown when page loads
    startResendCooldown();

    document.getElementById('resendBtn').addEventListener('click', async function() {
      if (resendCooldownActive) {
        return; // Prevent multiple clicks during cooldown
      }

      const resendBtn = document.getElementById('resendBtn');
      const resendCooldown = document.getElementById('resendCooldown');
      const cooldownTimer = document.getElementById('cooldownTimer');

      // Disable button and show loading
      resendBtn.disabled = true;
      resendBtn.textContent = 'Sending...';

      try {
        const response = await fetch('/resend-reset-otp', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          }
        });

        const data = await response.json();

        if (data.success) {
          // Show success message
          Swal.fire({
            icon: 'success',
            title: 'OTP Resent!',
            text: data.message,
            timer: 2000,
            showConfirmButton: false
          });

          // Clear the OTP input field
          document.getElementById('otp').value = '';
          document.getElementById('otpError').textContent = '';

          // Reset the timer completely to prevent old expired alerts
          resetTimer();

          // Start cooldown
          startResendCooldown();

        } else {
          Swal.fire({
            icon: 'error',
            title: 'Resend Failed',
            text: data.message,
            confirmButtonText: 'OK'
          });
        }
      } catch (error) {
        Swal.fire({
          icon: 'error',
          title: 'Network Error',
          text: 'Failed to resend OTP. Please try again.',
          confirmButtonText: 'OK'
        });
      } finally {
        // Re-enable button if no cooldown started
        if (!resendCooldownActive) {
          resendBtn.disabled = false;
          resendBtn.textContent = 'Resend OTP';
        }
      }
    });


  </script>

  <style>
    .error-message {
      color: #dc3545;
      font-size: 12px;
      margin-top: 5px;
      display: block;
    }
    
    .btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }
    
    .form-group {
      margin-bottom: 20px;
    }
    
    .form-group label {
      display: block;
      margin-bottom: 5px;
      font-weight: 500;
    }
    
    .form-group input {
      width: 100%;
      padding: 12px;
      border: 1px solid #ddd;
      border-radius: 4px;
      font-size: 18px;
      text-align: center;
      letter-spacing: 3px;
    }
    
    .form-group input:focus {
      outline: none;
      border-color: #007bff;
    }
    
    #timer {
      background-color: #f8f9fa;
      padding: 8px 12px;
      border-radius: 4px;
      display: inline-block;
    }
    
    #countdown {
      font-weight: bold;
      color: #007bff;
    }
    
    .resend-btn {
      background-color: #6c757d;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 4px;
      font-size: 14px;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }
    
    .resend-btn:hover:not(:disabled) {
      background-color: #5a6268;
    }
    
    .resend-btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }
    
    #resendCooldown {
      background-color: #f8f9fa;
      padding: 8px 12px;
      border-radius: 4px;
      border: 1px solid #dee2e6;
    }
  </style>
</body>
</html>